{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3153970241546631}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df['city'] = df['city'].astype('category')\n    df['department'] = df['department'].astype('category')\n    df['performance'] = df['performance'].clip(lower=0, upper=5)\n    df['is_high_performer'] = df['performance'] > 4\n    df['date'] = df['date'].dt.date\n    unique_names = df['name'].nunique()\n    duplicate_dates = df['date'].duplicated(keep=False).sum()\n    return unique_names + duplicate_dates\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "7", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23833537101745605}
{"language": "python", "code": "import pandas as pd\n\ndef pivot_data(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    pivot = df.pivot_table(index='city', values='salary', aggfunc='sum')\n    return \"success\" if pivot['salary'].max() > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = pivot_data(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "pivot_tables", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2355637550354004}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    \n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    \n    bcast_array = array + np.array([[1], [2]])\n    \n    if bcast_array.strides[0] < 0 or bcast_array.strides[1] < 0:\n        return \"error\"\n    \n    return str(np.sum(bcast_array))\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "96.0", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08970189094543457}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    email_pattern = r'\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,6}\\b'\n    phone_pattern = r'\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}'\n    email_match = re.search(email_pattern, input_data['text'])\n    phone_match = re.search(phone_pattern, input_data['text'])\n    return email_match.group(0) if email_match else \"none\"\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = extract_info(input_data)\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05066180229187012}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09050512313842773}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).date()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = simple_formatting(input_data)\nprint(result)", "input": null, "output": "2023-12-25", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.053894996643066406}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    pattern = r'(\\(\\(.*?\\)\\))|([^\\(\\)]+)'\n    matches = re.findall(pattern, input_data['text'])\n    count = sum(1 for match in matches if match[0] or match[1].strip())\n    return count\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = atomic_groups(input_data)\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05167388916015625}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30417680740356445}
{"language": "python", "code": "import requests\n\ndef file_uploads(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"POST\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\", {})\n    session = requests.Session()\n    try:\n        response = session.request(method, url, json=data, headers=headers, timeout=5)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_uploads(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.49616384506225586}
{"language": "python", "code": "import pandas as pd\n\ndef pivot_salary_average(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(float)\n    pivot = df.pivot_table(values='salary', index='city', aggfunc='mean')\n    return \"success\" if pivot['salary'].sum() > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = pivot_salary_average(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "pivot_tables", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.24189496040344238}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_data = json.dumps(input_data, ensure_ascii=False)\n        loaded_data = json.loads(json_data)\n        if 'data' in loaded_data and 'value' in loaded_data['data']['nested']['deep']['very']['deep']:\n            return loaded_data['data']['nested']['deep']['very']['deep']['value']\n        if 'edge_cases' in loaded_data and 'circular_refs' in loaded_data['edge_cases']:\n            a = {}\n            a['self'] = a\n            return \"error\"\n        return True\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\n    \"data\": {\n        \"nested\": {\n            \"deep\": {\n                \"very\": {\n                    \"deep\": {\n                        \"value\": 42\n                    }\n                }\n            },\n            \"array\": [1, 2, {\"nested\": \"value\"}],\n            \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\",\n            \"numbers\": {\n                \"int\": 42,\n                \"float\": 3.14159,\n                \"big\": 1234567890123456789\n            }\n        },\n        \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]\n    }\n}\n\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05252218246459961}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051817893981933594}
{"language": "python", "code": "import json\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, dict) and 'circular_refs' in obj:\n            return \"error\"\n        return super().default(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        json_str = json.dumps(input_data, cls=CustomEncoder)\n        return len(json_str) % 10\n    except OverflowError:\n        return 0\n    except Exception:\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "4", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05081009864807129}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = get_day_of_week(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.056112051010131836}
{"language": "python", "code": "import numpy as np\n\ndef compute_broadcasted_sum(input_data):\n    arr = np.array(input_data[\"array\"])\n    shape = np.array(input_data[\"shape\"])\n    if arr.shape != tuple(shape):\n        return \"error\"\n    return np.sum(arr) > 20\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = compute_broadcasted_sum(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "broadcasting_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08997702598571777}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.31771397590637207}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_value = np.mean(array)\n    return mean_value > 5\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09196972846984863}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, separators=(',', ':'), default=str)\n        parsed = json.loads(json_str)\n        if 'data' in parsed and 'value' in parsed['data']['nested']['deep']['very']:\n            return parsed['data']['nested']['deep']['very']['value']\n        if 'circular_refs' in parsed['edge_cases']:\n            return \"error\"\n        if 'precision_loss' in parsed['edge_cases']:\n            return False\n        return True\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051724910736083984}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'[\\w\\.-]+@[\\w\\.-]+', text)\n    phone_match = re.search(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', text)\n    return email_match.group(0) if email_match else \"no email\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05048680305480957}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = basic_aggregation({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2386617660522461}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    try:\n        arr_broadcast = arr + np.array([[1], [2]])\n        return \"success\" if arr_broadcast.shape == (3, 2, 2) else \"error\"\n    except ValueError:\n        return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09195518493652344}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(-1)\n    mean_value = np.mean(reshaped)\n    return \"success\" if mean_value > 5 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.060540199279785156}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(\"lazy\", input_data[\"text\"], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052562713623046875}
{"language": "python", "code": "import re\n\ndef count_emails_and_phones(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_pattern = r'\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b'\n    phone_pattern = r'\\(?\\d{3}\\)?\\s?\\d{3}-\\d{4}'\n    emails = re.findall(email_pattern, text)\n    phones = re.findall(phone_pattern, text)\n    return len(emails) + len(phones)\n\nresult = count_emails_and_phones({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05176281929016113}
{"language": "python", "code": "import re\n\ndef non_capturing_groups(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:\\'[^\\']*\\'|\"[^\"]*\")|(?:\\{[^}]*\\}|\\[[^\\]]*\\])'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = non_capturing_groups(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05147600173950195}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\nresult = basic_error_handling('{\"data\": {\"name\": \"John\", \"age\": 30}}')\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04877114295959473}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    try:\n        parsed = json.loads(input_data)\n        users = parsed.get(\"data\", {}).get(\"users\", [])\n        active_count = sum(1 for user in users if user.get(\"active\"))\n        return \"success\" if active_count > 0 else \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05005908012390137}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef custom_formatting(input_data):\n    try:\n        local_tz = pytz.timezone(input_data['date_string'].split()[-1])\n        naive_dt = datetime.datetime.strptime(input_data['date_string'][:-4], input_data['format'][:-4])\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data['target_timezone'])\n        utc_dt = local_dt.astimezone(target_tz)\n        return utc_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = custom_formatting(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "custom_formatting", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07169938087463379}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    date_string = input_data[\"date_string\"]\n    format_string = input_data[\"format\"]\n    target_timezone = pytz.timezone(input_data[\"target_timezone\"])\n    \n    try:\n        local_dt = datetime.strptime(date_string, format_string)\n        local_dt = pytz.timezone(\"EST\").localize(local_dt)\n        target_dt = local_dt.astimezone(target_timezone)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.058624982833862305}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    email_pattern = r'[\\w\\.-]+@[\\w\\.-]+'\n    phone_pattern = r'\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}'\n    email_match = re.search(email_pattern, input_data['text'])\n    phone_match = re.search(phone_pattern, input_data['text'])\n    return email_match.group(0) if email_match else \"not found\"\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = extract_info(input_data)\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04937386512756348}
{"language": "python", "code": "import json\n\ndef encoding_success(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return \"success\" if json_str else \"error\"\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = encoding_success(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.053163766860961914}
{"language": "python", "code": "import pandas as pd\n\ndef aggregate_salary(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.groupby('city')['salary'].mean().max()\n    return round(avg_salary)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = aggregate_salary(input_data)\nprint(result)", "input": null, "output": "62500", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22075295448303223}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(total=input_data['retries'], backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3574562072753906}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_performance_metric(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    df['performance'] = df['performance'].clip(lower=0)\n    avg_performance = df['performance'].mean()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = calculate_performance_metric(input_data)\nprint(result)", "input": null, "output": "4.2", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23975706100463867}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?P<word>\\b\\w+\\b)(?=.*\\b(?P=word)\\b)'\n    matches = re.findall(pattern, text)\n    return str(len(matches))\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "0", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05124521255493164}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'fox', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052764892578125}
{"language": "python", "code": "import numpy as np\n\ndef structured_arrays(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    reshaped = arr.reshape(-1)\n    total_sum = np.sum(reshaped)\n    return total_sum > 50\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = structured_arrays(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07314896583557129}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=1)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], timeout=input_data[\"timeout\"], stream=True)\n        if response.status_code == 200:\n            return \"success\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\nresult = streaming_requests({\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}})\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3159360885620117}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04126095771789551}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    data = json.loads(input_data)\n    active_users = sum(1 for user in data[\"data\"][\"users\"] if user.get(\"active\"))\n    return active_users\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05230116844177246}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    success_count = 0\n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], json=input_data[\"data\"], headers=input_data[\"headers\"], timeout=5)\n        if response.status_code == 200:\n            success_count += 1\n    except (requests.ConnectionError, requests.Timeout):\n        return \"error\"\n    return success_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3185911178588867}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30274367332458496}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.8474438190460205}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    response = None\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"GET\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n\n    for _ in range(3):\n        try:\n            if method == \"POST\":\n                response = session.post(url, json=data, headers=headers, timeout=2)\n            else:\n                response = session.get(url, headers=headers, timeout=2)\n\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.Timeout, requests.ConnectionError):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3011608123779297}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    email_pattern = r'([\\w.-]+@[\\w.-]+)'\n    phone_pattern = r'(\\(\\d{3}\\)\\s*\\d{3}-\\d{4})'\n    email = re.search(email_pattern, input_data['text'])\n    phone = re.search(phone_pattern, input_data['text'])\n    return email.group(1) if email else \"error\"\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = extract_info(input_data)\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05200910568237305}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_dt = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n        local_tz = pytz.timezone(\"EST\")\n        local_dt = local_tz.localize(local_dt)\n        target_tz = pytz.timezone(input_data[\"target_timezone\"])\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05817008018493652}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        data = json.loads(input_data)\n        value = data['data']['nested']['deep']['very']['deep']['value']\n        precision_test = data['data']['numbers']['float']\n        return \"success\" if value == 42 and precision_test == 3.14159 else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05190682411193848}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcast_compatibility(input_data):\n    array = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = tuple(input_data['shape'])\n    edge_cases = input_data['edge_cases']\n    \n    if array.shape != shape:\n        return False\n    \n    if 'broadcasting' in edge_cases:\n        try:\n            np.empty(shape).reshape(array.shape)\n        except ValueError:\n            return False\n\n    if 'memory_layout' in edge_cases:\n        if array.flags['C_CONTIGUOUS']:\n            return True\n            \n    return array.ndim == len(shape) and all(s1 == s2 or s1 == 1 or s2 == 1 for s1, s2 in zip(array.shape[::-1], shape[::-1]))\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = check_broadcast_compatibility(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09179997444152832}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        parsed = json.loads(json.dumps(input_data))\n        deep_value = parsed['data']['nested']['deep']['very']['deep']['value']\n        unicode_check = isinstance(parsed['data']['special_chars'], str)\n        circular_ref = None\n        circular = {}\n        circular['self'] = circular\n        circular_ref = json.dumps(circular)\n        precision_check = round(parsed['data']['numbers']['float'], 2)\n        return str(deep_value + unicode_check + (circular_ref is not None) + precision_check).count('1')\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0528111457824707}
{"language": "python", "code": "import requests\n\ndef file_upload(input_data):\n    with requests.Session() as session:\n        try:\n            response = session.request(\n                method=input_data.get(\"method\", \"POST\"),\n                url=input_data[\"url\"],\n                json=input_data.get(\"data\", {}),\n                headers=input_data.get(\"headers\", {}),\n                timeout=5\n            )\n            return \"success\" if response.status_code == 200 else \"error\"\n        except Exception:\n            return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_upload(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30182504653930664}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    result = np.sum(arr, axis=(0, 1)) / arr.size\n    if input_data[\"shape\"] != arr.shape:\n        return \"error\"\n    if arr.flags['C_CONTIGUOUS']:\n        return \"success\"\n    return False\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09218096733093262}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.41254496574401855}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    active_users = sum(1 for user in data[\"data\"][\"users\"] if user[\"active\"])\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05130195617675781}
{"language": "python", "code": "import numpy as np\n\ndef memory_view_analysis(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    view = array.view(np.float32)\n    shape_check = view.shape == tuple(input_data[\"shape\"])\n    return \"success\" if shape_check else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\"}\nresult = memory_view_analysis(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09168601036071777}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_salary = df['salary'].max()\n    return \"success\" if avg_performance.max() >= 4.5 and max_salary > 70000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2386171817779541}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    success_count = 0\n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], json=input_data.get(\"data\"), headers=input_data.get(\"headers\"), timeout=5)\n        if response.status_code == 200:\n            success_count += 1\n    except (requests.exceptions.RequestException, ValueError):\n        return \"error\"\n    return success_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.2921888828277588}
{"language": "python", "code": "import requests\n\ndef authentication_handling(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(method=input_data[\"method\"], url=input_data[\"url\"], json=input_data.get(\"data\"), headers=input_data.get(\"headers\"), timeout=5)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.exceptions.Timeout, requests.exceptions.RequestException):\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = authentication_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "authentication_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.49196696281433105}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\nimport time\n\ndef measure_response_time(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=retries,\n        backoff_factor=0.1,\n        status_forcelist=[500, 502, 503, 504],\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.perf_counter()\n    try:\n        response = session.request(method, url, timeout=timeout, verify=session_config[\"verify\"], stream=session_config[\"stream\"])\n        response.raise_for_status()\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\n    return round((time.perf_counter() - start_time) * 1000)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1535", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.6889159679412842}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter, Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retry = Retry(total=input_data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = streaming_requests(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.9577908515930176}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef advanced_streaming(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    response = session.request(\n        method=input_data[\"method\"],\n        url=input_data[\"url\"],\n        timeout=input_data[\"timeout\"],\n        verify=input_data[\"session_config\"][\"verify\"],\n        stream=input_data[\"session_config\"][\"stream\"]\n    )\n    \n    if response.ok:\n        return \"success\"\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = advanced_streaming(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "advanced_streaming", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.85982084274292}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.039154052734375}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department', observed=True)['performance'].mean()\n    return True if avg_performance.max() > 4.5 else False\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "False", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2372727394104004}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values('date').drop_duplicates(subset='date', keep='last')\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df['performance'].mean()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "4.2", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2275557518005371}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08738207817077637}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    pattern = r'[\\u00C0-\\u017F]'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05022788047790527}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], \n                                    verify=input_data[\"session_config\"][\"verify\"],\n                                    stream=input_data[\"session_config\"][\"stream\"], \n                                    timeout=input_data[\"timeout\"])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.832456350326538}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?<!\\w)(\\w+?)\\s*+(\\w+?)\\s*+(?=\\w)'\n    matches = re.findall(pattern, text)\n    return str(len(matches))\n\nresult = possessive_quantifiers({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "11", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052329301834106445}
{"language": "python", "code": "import requests\n\ndef file_uploads(input_data):\n    with requests.Session() as session:\n        try:\n            response = session.request(\n                method=input_data[\"method\"],\n                url=input_data[\"url\"],\n                json=input_data.get(\"data\"),\n                headers=input_data.get(\"headers\"),\n                timeout=5\n            )\n            return \"success\" if response.ok else \"error\"\n        except (requests.exceptions.RequestException, ValueError):\n            return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_uploads(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29562997817993164}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3560757637023926}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict):\n            if \"data\" in parsed:\n                if isinstance(parsed[\"data\"], dict):\n                    if \"numbers\" in parsed[\"data\"]:\n                        if isinstance(parsed[\"data\"][\"numbers\"], dict):\n                            return True\n        return False\n    except (ValueError, TypeError):\n        return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05227804183959961}
{"language": "python", "code": "import pandas as pd\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['rank'] = df.groupby('department')['performance'].rank(\"dense\", ascending=False)\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_salary = df.loc[df['rank'] == 1, 'salary'].sum()\n    return \"success\" if (avg_performance.max() > 4.5) and (max_salary > 100000) else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2409958839416504}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.strftime(\"%A\")\n\nresult = simple_formatting({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05227208137512207}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(data):\n    session = requests.Session()\n    retries = Retry(total=data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(data['method'], data['url'], timeout=data['timeout'], verify=data['session_config']['verify'], stream=data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.6631231307983398}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.5)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.452721118927002}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05146384239196777}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef custom_formatting(input_data):\n    try:\n        local_tz = pytz.timezone('EST')\n        naive_dt = datetime.strptime(input_data['date_string'], input_data['format'])\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data['target_timezone'])\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime('%Y-%m-%d %H:%M:%S')\n    except (ValueError, KeyError):\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = custom_formatting(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "custom_formatting", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07663822174072266}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08402395248413086}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_avg = avg_performance.max()\n    return \"success\" if max_avg > 4 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.20760798454284668}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    return array.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0915989875793457}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    indices = np.array([[0, 1], [2, 1]])\n    selected = arr[indices]\n    return str(np.sum(selected) > 20)\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09172201156616211}
{"language": "python", "code": "import json\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, list):\n            return [self.default(item) for item in obj]\n        if isinstance(obj, dict):\n            return {k: self.default(v) for k, v in obj.items()}\n        if isinstance(obj, str):\n            return obj.encode('utf-8').decode('utf-8')\n        return str(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        json_data = json.dumps(input_data, cls=CustomEncoder)\n        return len(json_data)\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "304", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.02669215202331543}
{"language": "python", "code": "import numpy as np\n\ndef performance_improvement_ratio(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    transformed = np.sum(arr, axis=1) / arr.shape[0]\n    baseline = np.sum(arr) / arr.size\n    ratio = transformed / baseline\n    return ratio.mean() if input_data[\"edge_cases\"][0] == \"broadcasting\" else 0\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_improvement_ratio(input_data)\nprint(result)", "input": null, "output": "0.6666666666666666", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09156513214111328}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    try:\n        response = session.request(method, url, json=data, headers=headers, timeout=2)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.exceptions.Timeout, requests.exceptions.RequestException):\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.6370658874511719}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\nresult = simple_formatting({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05638408660888672}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    successful_count = 0\n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], json=input_data[\"data\"], headers=input_data[\"headers\"], timeout=5)\n        if response.status_code == 200:\n            successful_count += 1\n    except (requests.exceptions.RequestException, ValueError):\n        return \"error\"\n    return successful_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3027310371398926}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['salary'] = df['salary'].fillna(0)\n    average_salary = df['salary'].mean()\n    return 'success' if average_salary > 0 else 'error'\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2793400287628174}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    pattern = r'[\\u0080-\\uFFFF]'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05564737319946289}
{"language": "python", "code": "import numpy as np\n\ndef is_broadcastable(input_data):\n    array = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = np.array(input_data['shape'])\n    try:\n        result_shape = np.broadcast(array, np.empty(shape)).shape\n        return np.array_equal(result_shape, shape)\n    except ValueError:\n        return False\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = is_broadcastable(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09167218208312988}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    pattern = r'[\\u0080-\\uFFFF]'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.056040048599243164}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.day\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = date_arithmetic(input_data)\nprint(result)", "input": null, "output": "25", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.054424285888671875}
{"language": "python", "code": "import numpy as np\n\ndef memory_view_test(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    view = reshaped[:, 1, :]\n    result = np.sum(view) * 0.5\n    return result > 20\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_view_test(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09109091758728027}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"GET\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    retries = 3\n    timeout = 5\n    \n    session = requests.Session()\n    response = None\n\n    for _ in range(retries):\n        try:\n            if method == \"POST\":\n                response = session.post(url, json=data, headers=headers, timeout=timeout)\n            else:\n                response = session.get(url, headers=headers, timeout=timeout)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.ConnectionError, requests.Timeout):\n            continue\n    \n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30011892318725586}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22104978561401367}
{"language": "python", "code": "import re\n\ndef anchor_and_boundaries(input_data):\n    text = input_data.get(\"text\", \"\")\n    emails = re.findall(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phones = re.findall(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return f\"{len(emails)} emails, {len(phones)} phones\"\n\nresult = anchor_and_boundaries({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "1 emails, 1 phones", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "anchors_and_boundaries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052249908447265625}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    reshaped = arr.reshape(input_data['shape'])\n    total_sum = np.sum(reshaped, axis=(0, 1))\n    flattened = total_sum.flatten()\n    optimized_sum = np.sum(flattened)\n    return \"success\" if optimized_sum > 50 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08991193771362305}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef advanced_streaming(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=1, status_forcelist={500, 502, 503, 504})\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(\n            method=input_data['method'], \n            url=input_data['url'], \n            timeout=input_data['timeout'], \n            verify=input_data['session_config']['verify'], \n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"request_failed\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = advanced_streaming(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "advanced_streaming", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 3.6099469661712646}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = streaming_requests(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.9725048542022705}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    edge_case = input_data[\"edge_cases\"]\n    \n    if \"broadcasting\" in edge_case:\n        arr_broadcasted = arr + np.array([[1], [2]])\n        if arr_broadcasted.shape != (3, 2, 2):\n            return \"error\"\n    \n    if \"memory_layout\" in edge_case:\n        if arr.flags['C_CONTIGUOUS']:\n            return \"success\"\n    \n    return arr.sum() if arr.size > 0 else 0\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09045791625976562}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.28916192054748535}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, separators=(',', ':'))\n        loaded_data = json.loads(json_str)\n        if 'data' in loaded_data and 'numbers' in loaded_data['data']:\n            int_val = loaded_data['data']['numbers']['int']\n            float_val = loaded_data['data']['numbers']['float']\n            if float_val > int_val:\n                return True\n            return False\n    except (TypeError, ValueError):\n        return \"error\"\n    return \"failure\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "False", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.053008079528808594}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(\"success\")", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051065921783447266}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05261993408203125}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    arr_broadcasted = arr + np.array([1, 2])\n    reshaped = arr_broadcasted.reshape(-1)\n    total = np.sum(reshaped)\n    if input_data[\"edge_cases\"] == [\"broadcasting\", \"memory_layout\"]:\n        return \"success\" if total > 50 else \"error\"\n    return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09143209457397461}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        if isinstance(json_str, str) and json_str:\n            return \"success\"\n    except (TypeError, OverflowError):\n        return \"error\"\n    return \"error\"\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04694509506225586}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.5)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], \n                                    timeout=input_data['timeout'], \n                                    verify=input_data['session_config']['verify'], \n                                    stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.2869389057159424}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09290003776550293}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.053344011306762695}
{"language": "python", "code": "import numpy as np\n\ndef linear_algebra(input_data):\n    array = np.array(input_data[\"array\"])\n    shape = np.array(input_data[\"shape\"])\n    if array.shape != tuple(shape):\n        return \"error\"\n    return np.linalg.det(array) > 0\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = linear_algebra(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "linear_algebra", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09581208229064941}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream'],\n            timeout=input_data['timeout']\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"request error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3579721450805664}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.036949872970581055}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.groupby('city')['salary'].mean().max()\n    return \"Above Average\" if avg_salary > 50000 else \"Below Average\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "Above Average", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22773981094360352}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = pd.to_numeric(df['salary'], errors='coerce')\n    df['date'] = pd.to_datetime(df['date'])\n    agg_result = df.groupby('department').agg(\n        avg_performance=('performance', 'mean'),\n        total_salary=('salary', 'sum')\n    ).reset_index()\n    max_avg_performance = agg_result['avg_performance'].max()\n    return \"success\" if max_avg_performance > 4.5 else \"failure\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "failure", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2315356731414795}
{"language": "python", "code": "import numpy as np\n\ndef measure_performance_improvement(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    original_shape = array.shape\n    transformed_array = array * 2\n    improved_ratio = np.sum(transformed_array) / np.sum(array)\n    return round(improved_ratio, 2)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = measure_performance_improvement(input_data)\nprint(result)", "input": null, "output": "2.0", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08776426315307617}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?:(\\w+)\\s+.*?\\1|(\\w+)\\s+.*?(\\w+)\\2)'\n    text = input_data['text']\n    if re.search(pattern, text):\n        return \"match\"\n    return \"no match\"\n\nresult = advanced_backreferences({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "match", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052557945251464844}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(\n            method=input_data.get(\"method\", \"GET\"),\n            url=input_data[\"url\"],\n            json=input_data.get(\"data\"),\n            headers=input_data.get(\"headers\"),\n            timeout=5\n        )\n        return 1 if response.status_code == 200 else 0\n    except (requests.exceptions.RequestException, TypeError):\n        return 0\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3035762310028076}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05167841911315918}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return \"success\" if avg_performance > 4 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23093223571777344}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data['text']\n    pattern = r'[\\u00C0-\\u00FF]+'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05145907402038574}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30220699310302734}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051663875579833984}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29459309577941895}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef leap_year_edge_cases(input_data):\n    date_string = input_data[\"date_string\"]\n    timezone = pytz.timezone(input_data[\"timezone\"])\n    operations = input_data[\"operations\"]\n\n    naive_dt = datetime.datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n    aware_dt = timezone.localize(naive_dt)\n\n    if \"handle_ambiguous\" in operations:\n        aware_dt = timezone.normalize(aware_dt)\n\n    if \"add_days\" in operations:\n        aware_dt += datetime.timedelta(days=1)\n\n    if \"convert_timezone\" in operations:\n        aware_dt = aware_dt.astimezone(pytz.utc)\n\n    return aware_dt.year % 4 == 0 and (aware_dt.year % 100 != 0 or aware_dt.year % 400 == 0)\n\ninput_data = {\"date_string\": \"2023-03-12 02:30:00\", \"timezone\": \"US/Eastern\", \"operations\": [\"add_days\", \"convert_timezone\", \"handle_ambiguous\"]}\nresult = leap_year_edge_cases(input_data)\nprint(result)", "input": null, "output": "False", "library": "datetime", "difficulty": "ADVANCED", "task_type": "leap_year_edge_cases", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0749199390411377}
{"language": "python", "code": "import re\n\ndef extract_data(input_data):\n    pattern = r\"(\\{.*?\\}|\\[.*?\\]|'[^']*'|\\\"[^\\\"]*\\\")\"\n    matches = re.findall(pattern, input_data[\"text\"])\n    if matches:\n        return str(len(matches))\n    return \"0\"\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_data(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0531158447265625}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef test_adapter_functionality(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry = Retry(total=retries, backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return response.status_code == 200\n    except requests.Timeout:\n        return False\n    except requests.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = test_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3576383590698242}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    json_str = json.dumps(input_data, ensure_ascii=False)\n    parsed_data = json.loads(json_str)\n    if 'data' in parsed_data and 'nested' in parsed_data['data']:\n        return str(parsed_data['data']['nested']['deep']['very']['deep']['value'])\n    return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05164623260498047}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"], timeout=1)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.35866379737854004}
{"language": "python", "code": "import json\n\ndef count_parsed_json_objects(input_data):\n    parsed_data = json.loads(input_data)\n    count = 0\n\n    def count_recursive(obj):\n        nonlocal count\n        if isinstance(obj, dict):\n            count += 1\n            for value in obj.values():\n                count_recursive(value)\n        elif isinstance(obj, list):\n            count += 1\n            for item in obj:\n                count_recursive(item)\n\n    count_recursive(parsed_data)\n    return count\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_parsed_json_objects(input_data)\nprint(result)", "input": null, "output": "10", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05183720588684082}
{"language": "python", "code": "import json\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, set):\n            return list(obj)\n        if isinstance(obj, complex):\n            return {\"real\": obj.real, \"imag\": obj.imag}\n        return super().default(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        json_str = json.dumps(input_data, cls=CustomEncoder)\n        return len(json_str)\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "304", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05117201805114746}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    successful_count = 0\n    try:\n        response = session.request(method=input_data[\"method\"], url=input_data[\"url\"], json=input_data.get(\"data\"), headers=input_data.get(\"headers\"), timeout=5)\n        if response.status_code == 200:\n            successful_count += 1\n    except (requests.exceptions.RequestException, ValueError):\n        return \"error\"\n    return successful_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3001070022583008}
{"language": "python", "code": "import requests\n\ndef file_upload(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"POST\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\", {})\n    \n    if url and data:\n        with requests.Session() as session:\n            try:\n                response = session.request(method, url, json=data, headers=headers, timeout=5)\n                return \"success\" if response.status_code == 200 else \"error\"\n            except (requests.exceptions.Timeout, requests.exceptions.RequestException):\n                return \"error\"\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_upload(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.6416268348693848}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    df['city'] = df['city'].astype('category')\n    df['department'] = df['department'].astype('category')\n    duplicated_dates = df.duplicated(subset='date').any()\n    if duplicated_dates:\n        df = df[~df.duplicated(subset='date', keep='first')]\n    return \"success\" if df.shape[0] > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2180171012878418}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df['salary'].mean()\n    return \"success\" if avg_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2349860668182373}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        return value\n    except (KeyError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0525202751159668}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    highest_age = df['age'].max()\n    return \"success\" if total_salary > highest_age * 1000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2344069480895996}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef performance_monitoring(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(total=retries, backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return \"success\" if response.ok else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = performance_monitoring(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "performance_monitoring", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3495278358459473}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    unicode_pattern = r'[\\u00C0-\\u00FF]'\n    matches = re.findall(unicode_pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05268216133117676}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    parsed_data = json.loads(json.dumps(input_data, separators=(',', ':')))\n    return parsed_data['data']['numbers']['int'] + parsed_data['data']['numbers']['float'] > 45\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03783702850341797}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df[df['date'].duplicated(keep='first') | df['date'].duplicated(keep=False)]\n    df.loc[df['performance'] > 4.5, 'performance'] = np.nan\n    return df['salary'].mean() > 50000\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.31083178520202637}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3200631141662598}
{"language": "python", "code": "import re\n\ndef check_pattern_existence(input_data):\n    text = input_data[\"text\"]\n    pattern = r\"(?<!\\w)'([^']+)'|(?<!\\w)\\\"([^\\\"]+)\\\"\"\n    matches = re.findall(pattern, text)\n    return True if matches else False\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = check_pattern_existence(input_data)\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "ADVANCED", "task_type": "lookahead_lookbehind", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.050961971282958984}
{"language": "python", "code": "import re\n\ndef extract_age(input_data):\n    pattern = r'(?:\\'age\\'\\s*:\\s*(\\d+))'\n    match = re.search(pattern, input_data['text'])\n    return match.group(1) if match else \"not found\"\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_age(input_data)\nprint(result)", "input": null, "output": "30", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05104804039001465}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09244108200073242}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\nimport time\n\ndef measure_response_time(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    start_time = time.time()\n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], timeout=input_data[\"timeout\"], \n                                   verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        response.raise_for_status()\n        duration = time.time() - start_time\n        return round(duration * 1000)\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "3445", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 3.5644731521606445}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = get_day_of_week(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05545806884765625}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df['salary'].mean()\n    recent_date = df['date'].max()\n    return \"success\" if avg_salary > 0 and recent_date.year == 2023 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23590707778930664}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(\\w+)\\s+\\1|\\(\\(\\(\\s*\\)\\)\\)'\n    matches = re.findall(pattern, text)\n    return str(len(matches))\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "1", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05031919479370117}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(\n            method=input_data.get(\"method\", \"GET\"),\n            url=input_data[\"url\"],\n            json=input_data.get(\"data\"),\n            headers=input_data.get(\"headers\"),\n            timeout=5\n        )\n        return 1 if response.status_code == 200 else 0\n    except Exception:\n        return 0\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.6408090591430664}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    arr = np.array(input_data[\"array\"])\n    return np.sum(arr)\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0901792049407959}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcast_compatibility(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = tuple(input_data['shape'])\n    target_shape = np.broadcast(arr, np.empty(shape)).shape\n    return target_shape == shape\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = check_broadcast_compatibility(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.06393074989318848}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    data = json.loads(json.dumps(input_data, ensure_ascii=False))\n    if 'circular_refs' in data['edge_cases']:\n        return \"error\"\n    if isinstance(data['data']['numbers']['big'], int):\n        return True\n    if abs(data['data']['numbers']['float'] - 3.14) < 0.01:\n        return 42\n    if data['data']['special_chars'].count('é') > 0:\n        return \"success\"\n    return 0\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04684925079345703}
{"language": "python", "code": "import re\n\ndef extract_age(input_data):\n    text = input_data[\"text\"]\n    match = re.search(r\"'age':\\s*(\\d+)\", text)\n    return match.group(1) if match else \"not found\"\n\nresult = extract_age({\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"})\nprint(result)", "input": null, "output": "30", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.026977062225341797}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05083012580871582}
{"language": "python", "code": "import re\n\ndef extract_quotes(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:[\"\\'])(.*?)(?:[\"\\'])'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_quotes(input_data)\nprint(result)", "input": null, "output": "5", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03794503211975098}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], \n                                    timeout=input_data['timeout'], \n                                    verify=input_data['session_config']['verify'], \n                                    stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.5522100925445557}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df['performance'].mean()\n    high_performers = df[df['performance'] >= 4.5]\n    return len(high_performers)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3016479015350342}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed_data = json.loads(input_data, strict=False)\n        value = parsed_data['data']['nested']['deep']['very']['deep']['value']\n        return value if isinstance(value, int) else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.030578136444091797}
{"language": "python", "code": "import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.03452897071838379}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u00C0-\\u017F]'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03070807456970215}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.34018492698669434}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values('date', inplace=True)\n    df.set_index('date', inplace=True)\n    avg_performance = df['performance'].mean()\n    max_salary = df['salary'].max()\n    return \"success\" if avg_performance > 4.0 and max_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2703540325164795}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return True if isinstance(json_str, str) and json_str else \"success\"\n    except (TypeError, OverflowError):\n        return False\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05079460144042969}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_performance = df['performance'].mean()\n    high_salary_count = (df['salary'] > 50000).sum()\n    final_metric = avg_performance * (1 + high_salary_count * 0.1)\n    return round(final_metric, 2)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "5.51", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2322838306427002}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.049566030502319336}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    return np.sum(input_data[\"array\"])\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0688178539276123}
{"language": "python", "code": "import re\n\ndef check_pattern_existence(input_data):\n    text = input_data['text']\n    pattern = r\"(?:\\{'(?:[^']|'')*'\\s*:\\s*'[^']*'\\}\\s*|\\[\\d+(?:,\\s*\\d+)*\\])\"\n    match = re.search(pattern, text)\n    return bool(match)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = check_pattern_existence(input_data)\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "ADVANCED", "task_type": "lookahead_lookbehind", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0471501350402832}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"], timeout=1)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.31807994842529297}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = date_arithmetic(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05280780792236328}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].clip(lower=0, upper=5)\n    df['department'] = df['department'].astype('category')\n    df['city'] = df['city'].astype('category')\n    df['name'] = df['name'].str.encode('utf-8').str.decode('utf-8')\n    unique_dates = df['date'].nunique()\n    return unique_dates\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "4", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23605918884277344}
{"language": "python", "code": "import re\n\ndef extract_numbers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\d+'\n    matches = re.findall(pattern, text)\n    return len(matches) if matches else 0\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_numbers(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04656791687011719}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'([\\w\\.-]+)@([\\w\\.-]+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\)\\s(\\d{3})-(\\d{4})', text)\n    return email_match.group(0) if email_match else \"error\" if not phone_match else \"no email\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05119895935058594}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed['data']['nested']['deep']['very']['deep']['value']\n        return value if isinstance(value, int) else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05085301399230957}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    return array.reshape(input_data[\"shape\"]).size\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08913993835449219}
{"language": "python", "code": "import re\n\ndef anchors_and_boundaries(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return \"found\" if email_match and phone_match else \"not found\"\n\nresult = anchors_and_boundaries({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "found", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "anchors_and_boundaries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0512850284576416}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = column_selection({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22466492652893066}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    parsed_data = json.loads(input_data)\n    count = 0\n    def recursive_count(obj):\n        nonlocal count\n        if isinstance(obj, dict):\n            count += 1\n            for value in obj.values():\n                recursive_count(value)\n        elif isinstance(obj, list):\n            count += 1\n            for item in obj:\n                recursive_count(item)\n    recursive_count(parsed_data)\n    return count\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "10", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0585939884185791}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    performance_mean = df.groupby('department')['performance'].mean()\n    salary_mean = df.groupby('department')['salary'].mean()\n    performance_threshold = (performance_mean > 4).sum()\n    high_salary_count = (salary_mean > 60000).sum()\n    return \"success\" if performance_threshold == high_salary_count else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21462464332580566}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    if \"broadcasting\" in input_data[\"edge_cases\"]:\n        arr_broadcasted = arr + np.array([[1], [2]])\n        if arr_broadcasted.shape != (3, 2, 2):\n            return \"error\"\n    if \"memory_layout\" in input_data[\"edge_cases\"]:\n        if arr.flags['C_CONTIGUOUS']:\n            return \"success\"\n    return arr.sum()\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08826303482055664}
{"language": "python", "code": "import pandas as pd\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['rank'] = df.groupby('department')['performance'].rank(method='first')\n    df['adjusted_salary'] = df['salary'] * (1 + (df['performance'] - 3))\n    df['performance'] = df['performance'].where(df['performance'] < 5, 5)\n    return df['adjusted_salary'].sum() > 300000\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23633098602294922}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3124852180480957}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    def custom_encoder(obj):\n        if isinstance(obj, dict) and 'circular_refs' in obj.values():\n            return \"error\"\n        return obj\n    \n    try:\n        json_str = json.dumps(input_data, default=custom_encoder)\n        return \"success\" if json_str else \"error\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05017375946044922}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_tz = pytz.timezone(input_data['date_string'].split()[-1])\n        naive_dt = datetime.datetime.strptime(input_data['date_string'], input_data['format'])\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data['target_timezone'])\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07423186302185059}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.day\n\nresult = date_arithmetic({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "25", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.055006980895996094}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict) and \"data\" in data:\n            value = data[\"data\"][\"numbers\"][\"int\"]\n            if value == 42:\n                return \"success\"\n            return \"error\"\n    except (ValueError, TypeError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052865028381347656}
{"language": "python", "code": "import re\n\ndef anchors_and_boundaries(input_data):\n    text = input_data[\"text\"]\n    email_pattern = r'\\b[\\w.-]+@[\\w.-]+\\.\\w{2,4}\\b'\n    phone_pattern = r'\\(\\d{3}\\) \\d{3}-\\d{4}'\n    email_count = len(re.findall(email_pattern, text))\n    phone_count = len(re.findall(phone_pattern, text))\n    return \"found\" if email_count and phone_count else \"not found\"\n\nresult = anchors_and_boundaries({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "found", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "anchors_and_boundaries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.046353816986083984}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    text = input_data[\"text\"]\n    emails = re.findall(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phones = re.findall(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', text)\n    return len(emails) + len(phones)\n\nresult = count_matches({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05017900466918945}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].median(), inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values('date', inplace=True)\n    df['performance'] = df['performance'].clip(0, 5)\n    max_performance = df['performance'].max()\n    return \"success\" if max_performance > 4.5 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2891998291015625}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    json_str = json.dumps(input_data, separators=(',', ':'))\n    parsed_data = json.loads(json_str)\n    if 'value' in parsed_data['data']['nested']['deep']['very']:\n        return parsed_data['data']['nested']['deep']['very']['value']\n    return \"error\"\n\ninput_data = {\n    \"data\": {\n        \"nested\": {\n            \"deep\": {\n                \"very\": {\n                    \"deep\": {\n                        \"value\": 42\n                    }\n                }\n            },\n            \"array\": [1, 2, {\"nested\": \"value\"}],\n            \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\",\n            \"numbers\": {\n                \"int\": 42,\n                \"float\": 3.14159,\n                \"big\": 1234567890123456789\n            }\n        },\n        \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]\n    }\n}\n\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05209708213806152}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07023906707763672}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, allow_nan=False, ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        if isinstance(parsed_data, dict):\n            return str(parsed_data['data']['numbers']['int']) if 'int' in parsed_data['data']['numbers'] else \"error\"\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.027664899826049805}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        if isinstance(parsed_data['data']['numbers']['int'], int) and parsed_data['data']['numbers']['int'] == 42:\n            return \"success\"\n        if parsed_data['data']['special_chars'] == \"unicode: café, emoji: 🎉\":\n            return True\n    except (ValueError, TypeError):\n        return \"error\"\n    return 0\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050919294357299805}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict):\n            if 'data' in parsed and 'edge_cases' in parsed:\n                if isinstance(parsed['data'], dict) and isinstance(parsed['edge_cases'], list):\n                    return True\n    except (json.JSONDecodeError, TypeError):\n        return False\n    return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0485382080078125}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values(by='date').reset_index(drop=True)\n    high_perf = df[df['performance'] > 4.0]\n    avg_salary = high_perf['salary'].mean()\n    return int(avg_salary)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "68333", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.285153865814209}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08871698379516602}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        elif isinstance(obj, list):\n            return sum(count(i) for i in obj)\n        return 0\n    \n    try:\n        parsed_data = json.loads(input_data)\n        total_count = count(parsed_data)\n        return total_count\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051345109939575195}
{"language": "python", "code": "import json\n\ndef handle_circular_references(input_data):\n    class CircularRef:\n        def __init__(self):\n            self.self_ref = self\n            \n    circular_obj = CircularRef()\n    input_data['circular'] = circular_obj\n    try:\n        json_str = json.dumps(input_data, allow_nan=False)\n        return \"success\" if \"circular\" not in json_str else \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = handle_circular_references(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05060696601867676}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df['performance'].mean()\n    salary_threshold = df['salary'].mean()\n    high_performers = df[df['performance'] > avg_performance]\n    if high_performers['salary'].mean() > salary_threshold:\n        return True\n    return False\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2324228286743164}
{"language": "python", "code": "import pandas as pd\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['performance'] = df.groupby('department')['performance'].transform(lambda x: x - x.mean())\n    df['date'] = pd.to_datetime(df['date'])\n    unique_dates = df['date'].nunique()\n    avg_performance = df['performance'].mean()\n    return \"success\" if unique_dates > 2 and avg_performance > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2330780029296875}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = date_arithmetic(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0539703369140625}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data['text']\n    pattern = r'[\\u0080-\\uFFFF]+'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05232119560241699}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    if np.issubdtype(arr.dtype, np.floating):\n        return arr.sum() % 2 == 0\n    return \"success\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09325098991394043}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'fox', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05071306228637695}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    top_performer = df.loc[df['performance'].idxmax(), 'name']\n    return top_performer\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "Eve", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2406609058380127}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).date()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = simple_formatting(input_data)\nprint(result)", "input": null, "output": "2023-12-25", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.057743072509765625}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_str = json.dumps(input_data, ensure_ascii=False, default=str)\n        parsed_data = json.loads(json_str)\n        return str(parsed_data['data']['numbers']['int'])\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03871798515319824}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    pattern = r'\\b(\\w+?)\\s*+\\1\\b'\n    text = input_data['text']\n    matches = re.findall(pattern, text)\n    return len(matches) > 0\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "False", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05029702186584473}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    class CustomEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, dict) and 'circular_refs' in obj.values():\n                return \"circular_reference\"\n            return super().default(obj)\n\n    try:\n        json_str = json.dumps(input_data, cls=CustomEncoder)\n        return \"success\" if \"circular_reference\" in json_str else \"error\"\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03133511543273926}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df['performance'].mean()\n    return round(avg_performance, 2)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "4.24", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3190898895263672}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.49889397621154785}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n    df.sort_index(inplace=True)\n    df['high_performance'] = df['performance'] > 4.0\n    result = df['high_performance'].sum()\n    return result\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2475571632385254}
{"language": "python", "code": "import json\n\ndef encoding_success(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        parsed_data = json.loads(json_str)\n        return 'success' if input_data == parsed_data else 'error'\n    except (TypeError, ValueError):\n        return 'error'\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = encoding_success(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.027711153030395508}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0812537670135498}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03235507011413574}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    broadcasted = reshaped + np.arange(3)[:, None, None]\n    sum_result = np.sum(broadcasted)\n    return sum_result % 2 == 0\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08037495613098145}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:(?<=\\w)\\'s|(?<=\\w)\\s+(?=\\w))'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "6", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03383994102478027}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08110594749450684}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    grouped = df.groupby(['city', 'department']).agg({'performance': 'mean', 'salary': 'sum'})\n    return \"success\" if (grouped['performance'] > 4).any() else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.30384397506713867}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        return value\n    except (KeyError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03345298767089844}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\nresult = simple_formatting({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.03731203079223633}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    arr = np.array(input_data[\"array\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean = np.mean(arr)\n    std_dev = np.std(arr)\n    return \"valid\" if std_dev < mean else \"invalid\"\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "valid", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07580709457397461}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "4.5", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.29292964935302734}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\b(\\w+?)\\1+\\b'\n    matches = re.findall(pattern, text)\n    return str(len(matches))\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "0", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0337069034576416}
{"language": "python", "code": "import numpy as np\n\ndef linear_algebra(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    return np.linalg.det(array) > 0\n\nresult = linear_algebra({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "linear_algebra", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0808556079864502}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict):\n            if 'data' in parsed and isinstance(parsed['data'], dict):\n                if 'numbers' in parsed['data']:\n                    numbers = parsed['data']['numbers']\n                    return isinstance(numbers, dict) and all(isinstance(numbers[k], (int, float)) for k in numbers)\n        return False\n    except (json.JSONDecodeError, TypeError):\n        return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03308415412902832}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\b[a-zA-Z]{3}\\b', input_data['text']))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03466963768005371}
{"language": "python", "code": "import numpy as np\n\ndef memory_view_test(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = array.reshape(input_data[\"shape\"])\n    mean_val = np.mean(reshaped)\n    return \"success\" if mean_val > 5 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_view_test(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08034014701843262}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = column_selection({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3054840564727783}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    df['date'] = pd.to_datetime(df['date'])\n    grouped = df.groupby('department').agg({'performance': 'mean', 'salary': 'sum'}).reset_index()\n    max_performance = grouped['performance'].max()\n    total_salary = grouped['salary'].sum()\n    return \"success\" if max_performance > 4.0 and total_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.30313897132873535}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03372788429260254}
{"language": "python", "code": "import re\n\ndef analyze_text(input_data):\n    pattern = r'\\'(.*?)\\'|\\\"(.*?)\\\"|\\[(.*?)\\]|\\{(.*?)\\}'\n    matches = re.findall(pattern, input_data['text'])\n    result = sum(len(m[0] or m[1] or m[2] or m[3]) for m in matches)\n    return result\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = analyze_text(input_data)\nprint(result)", "input": null, "output": "51", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03294491767883301}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03494977951049805}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\")\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    if not url or not method:\n        return \"error\"\n    \n    try:\n        response = session.request(method, url, json=data, headers=headers, timeout=5)\n        session.close()\n        return 1 if response.status_code == 200 else 0\n    except requests.RequestException:\n        return 0\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.31348204612731934}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    email_match = re.search(r'[\\w\\.-]+@[\\w\\.-]+', input_data['text'])\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', input_data['text'])\n    return email_match.group(0) if email_match else \"no email\"\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = extract_info(input_data)\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.032533884048461914}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].mean(), inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values('date', inplace=True)\n    avg_performance = df['performance'].mean()\n    df['performance'] = df['performance'].where(df['performance'] > 4, 4)\n    return \"success\" if avg_performance > 4 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3010580539703369}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.7790470123291016}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    if input_data[\"edge_cases\"][0] == \"broadcasting\":\n        result = np.sum(reshaped, axis=0)\n        return \"success\" if result.shape == (2, 2) else \"error\"\n    return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.06745123863220215}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    shape = input_data[\"shape\"]\n    if array.shape != tuple(shape):\n        return \"error\"\n    indices = np.array([[0, 1], [1, 2]])\n    result = array[indices].sum()\n    return result if result < 30 else \"success\"\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08104109764099121}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed_data = json.loads(input_data)\n        value = parsed_data['data']['nested']['deep']['very']['deep']['value']\n        return str(value) if value == 42 else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.030278921127319336}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = simple_formatting(input_data)\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05500006675720215}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def count_helper(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count_helper(v) for v in obj.values())\n        if isinstance(obj, list):\n            return sum(count_helper(i) for i in obj)\n        return 0\n\n    parsed_data = json.loads(input_data)\n    return count_helper(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052459001541137695}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?P<first>\\w+)\\s+(?P=first)|(?P<second>[\\u00C0-\\u017F]+)'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05109906196594238}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = column_selection({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23573517799377441}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    return avg_performance.max() > 4.0\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.20549416542053223}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(total=input_data['retries'], backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.519507884979248}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef check_adapter_functionality(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(total=input_data['retries'], status_forcelist=[500], backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return response.ok\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = check_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.665217638015747}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    try:\n        arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n        if arr.shape != tuple(input_data[\"shape\"]):\n            return \"error\"\n        arr_broadcasted = arr + np.zeros((3, 1, 1), dtype=arr.dtype)\n        return \"success\" if arr_broadcasted.strides[0] == arr.strides[0] else \"error\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08995580673217773}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'([\\w\\.-]+@[\\w\\.-]+)', text)\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return email_match.group(0) if email_match else \"no email\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.048909664154052734}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = get_day_of_week(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05350089073181152}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        data = json.loads(json.dumps(input_data, default=lambda o: None))\n        value = data['data']['nested']['deep']['very']['deep']['value']\n        return value if isinstance(value, int) and value == 42 else \"error\"\n    except (KeyError, TypeError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = {\n    \"data\": {\n        \"nested\": {\n            \"deep\": {\n                \"very\": {\n                    \"deep\": {\n                        \"value\": 42\n                    }\n                }\n            },\n            \"array\": [1, 2, {\"nested\": \"value\"}],\n            \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\",\n            \"numbers\": {\n                \"int\": 42,\n                \"float\": 3.14159,\n                \"big\": 1234567890123456789\n            }\n        },\n        \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]\n    }\n}\n\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04944729804992676}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    pattern = r'(\\(?\\w+\\??\\s*[\\u00C0-\\u017F]*\\s*\\(?\\w*\\)?)'\n    matches = re.findall(pattern, input_data['text'])\n    return str(len(matches)) if matches else \"error\"\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = atomic_groups(input_data)\nprint(result)", "input": null, "output": "7", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051570892333984375}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    if arr.shape != tuple(shape):\n        return \"error\"\n    reshaped = arr.reshape(shape)\n    integrated = np.trapz(reshaped, axis=0)\n    avg = np.mean(integrated)\n    return avg > 5\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08675980567932129}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef advanced_streaming(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].upper()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=retries,\n        backoff_factor=1,\n        status_forcelist=[429, 500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return \"success\" if response.ok else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = advanced_streaming(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "advanced_streaming", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.4596290588378906}
{"language": "python", "code": "import numpy as np\n\ndef structured_array_function(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = array.reshape(input_data[\"shape\"])\n    broadcasted = reshaped + np.arange(reshaped.shape[0])[:, None, None]\n    total_sum = np.sum(broadcasted)\n    return \"success\" if total_sum > 0 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = structured_array_function(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07832598686218262}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday() == 6\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "False", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05556201934814453}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30469703674316406}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?<!\\w)(\\w+?)(?=\\s*\\w*?)(?=\\s*(?:(?!\\1).)*?\\1)'\n    matches = re.findall(pattern, text)\n    return str(len(set(matches)))\n\nresult = possessive_quantifiers({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "5", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05289101600646973}
{"language": "python", "code": "import numpy as np\n\ndef linear_algebra(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    return np.linalg.det(array).astype(np.float64) > 0\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = linear_algebra(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "linear_algebra", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09209609031677246}
{"language": "python", "code": "import requests\nfrom requests.exceptions import RequestException\n\ndef timeout_and_retries(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\")\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    retries = 3\n    timeout = 2\n\n    session = requests.Session()\n    for _ in range(retries):\n        try:\n            response = session.request(method, url, json=data, headers=headers, timeout=timeout)\n            if response.status_code == 200:\n                return \"success\"\n        except (RequestException, ValueError):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30434298515319824}
{"language": "python", "code": "import json\n\ndef simple_deserialization(input_data):\n    return json.loads(input_data)[\"data\"][\"age\"]\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = simple_deserialization(input_data)\nprint(result)", "input": null, "output": "30", "library": "json", "difficulty": "BEGINNER", "task_type": "simple_deserialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051428794860839844}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u00C0-\\u00FF]'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\nresult = count_unicode_matches({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0506439208984375}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u00C0-\\u017F]'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\nresult = count_unicode_matches({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05119013786315918}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?<=[\\(\\[]).*?(?=[\\)\\]])|(?<=\\w)\\s*[\\w\\s]*?(?=\\s*\\w)'\n    matches = re.findall(pattern, text)\n    count = len(matches)\n    return count\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "102", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052221059799194336}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    return \"success\" if total_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23886895179748535}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict) and 'data' in parsed:\n            value = parsed['data']['numbers']['int']\n            if value == 42 and isinstance(parsed['data']['numbers']['float'], float):\n                return True\n        return False\n    except (json.JSONDecodeError, KeyError):\n        return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05434584617614746}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\b\\w{4}\\b', input_data['text']))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05181288719177246}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_count > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051818132400512695}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    pattern = r'[\\u00C0-\\u017F]'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05129861831665039}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == \"New York\"].shape[0]\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = simple_filtering(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2340402603149414}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05124402046203613}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:(\\w+)\\s+\\1|(\\w+)\\s+\\2|(\\w+)\\s+\\3)|(\\(\\(\\(\\s*\\)\\)\\))'\n    match = re.search(pattern, text)\n    return \"match\" if match else \"no match\"\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "match", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05142498016357422}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    return df['age'].mean()\n\nresult = basic_aggregation({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22874069213867188}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    pattern = r'\\(\\(.*?\\)\\)' \n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = atomic_groups(input_data)\nprint(result)", "input": null, "output": "1", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05281424522399902}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:(\\w+)\\s+)(?=\\1)'\n    match = re.search(pattern, text)\n    return \"found\" if match else \"not found\"\n\nresult = advanced_backreferences({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "not found", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05137467384338379}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_time = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n        local_tz = pytz.timezone('EST')\n        local_time = local_tz.localize(local_time)\n        target_tz = pytz.timezone(input_data[\"target_timezone\"])\n        target_time = local_time.astimezone(target_tz)\n        return target_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.044058799743652344}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_performance = avg_performance.idxmax()\n    return max_performance\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "Engineering", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23357915878295898}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'], order='C')\n    reshaped = arr.reshape(input_data['shape'])\n    mapped = np.memmap('temp.dat', dtype=input_data['dtype'], mode='w+', shape=reshaped.shape)\n    mapped[:] = reshaped\n    return np.sum(mapped) > 50\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09632086753845215}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['age'] = df['age'].astype(int)\n    return df['salary'].count() > 2\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = missing_data_handling(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23339176177978516}
{"language": "python", "code": "import numpy as np\n\ndef memory_views(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    arr_view = arr.reshape(-1)\n    result = np.sum(arr_view) / arr_view.size\n    return \"success\" if result > 0 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_views(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09057784080505371}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef test_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = test_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.4600467681884766}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'], errors='coerce')\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    average_salary = df['salary'].mean()\n    return \"above average\" if average_salary > 50000 else \"below average\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "below average", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2335801124572754}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict):\n            if \"data\" in parsed and isinstance(parsed[\"data\"], dict):\n                return True\n        return False\n    except (ValueError, TypeError):\n        return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.049900054931640625}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23164892196655273}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3102872371673584}
{"language": "python", "code": "import re\n\ndef extract_age(input_data):\n    pattern = r\"'age':\\s*(\\d+)\"\n    match = re.search(pattern, input_data['text'])\n    return int(match.group(1)) if match else 0\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_age(input_data)\nprint(result)", "input": null, "output": "30", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05154919624328613}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        if isinstance(obj, list):\n            return sum(count(i) for i in obj)\n        return 0\n\n    try:\n        parsed_data = json.loads(input_data)\n        return count(parsed_data)\n    except (TypeError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051805973052978516}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    user_count = len(data[\"data\"][\"users\"])\n    active_users = sum(1 for user in data[\"data\"][\"users\"] if user[\"active\"])\n    return \"success\" if user_count == active_users else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05064702033996582}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_pattern = r'\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\\b'\n    phone_pattern = r'\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}'\n    email_match = re.search(email_pattern, text)\n    phone_match = re.search(phone_pattern, text)\n    return email_match.group(0) if email_match else \"no email\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.050704002380371094}
{"language": "python", "code": "from datetime import datetime, timedelta\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return (date + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\nresult = date_arithmetic({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "2023-12-26", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.052381038665771484}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef advanced_streaming(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = advanced_streaming(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "advanced_streaming", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 2.0017311573028564}
{"language": "python", "code": "import re\n\ndef anchors_and_boundaries(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return \"found\" if email_match and phone_match else \"not found\"\n\nresult = anchors_and_boundaries({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "found", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "anchors_and_boundaries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05224490165710449}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json_data = json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04874706268310547}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051139116287231445}
{"language": "python", "code": "import numpy as np\n\ndef measure_performance_improvement(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    start = np.sum(arr)\n    arr_flat = arr.reshape(-1)\n    end = np.sum(arr_flat)\n    ratio = end / start\n    return ratio\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = measure_performance_improvement(input_data)\nprint(result)", "input": null, "output": "1.0", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.10209822654724121}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\nimport time\n\ndef measure_response_time(data):\n    url = data[\"url\"]\n    method = data[\"method\"].upper()\n    timeout = data[\"timeout\"]\n    retries = data[\"retries\"]\n    session_config = data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(total=retries, status_forcelist=[429, 500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.time()\n    try:\n        response = session.request(method, url, timeout=timeout, verify=session_config[\"verify\"], stream=session_config[\"stream\"])\n        response.raise_for_status()\n    except Exception:\n        return \"error\"\n    elapsed_time = time.time() - start_time\n    return round(elapsed_time, 2)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1.51", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.6632351875305176}
{"language": "python", "code": "import re\n\ndef unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r\"[\\u00C0-\\u00FF]\"\n    matches = re.findall(pattern, text)\n    return len(matches)\n\nresult = unicode_matches({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0477139949798584}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    array = np.array(input_data['array'])\n    shape = np.array(input_data['shape'])\n    if array.shape != shape.tolist():\n        return \"error\"\n    return array[0, 1] + array[2, 2] > 10\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08970904350280762}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    retries = requests.adapters.HTTPAdapter(max_retries=3)\n    session.mount('http://', retries)\n    session.mount('https://', retries)\n    try:\n        response = session.request(input_data['method'], input_data['url'], json=input_data.get('data'), headers=input_data.get('headers'), timeout=2)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.Timeout, requests.RequestException):\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29618191719055176}
{"language": "python", "code": "import re\n\ndef non_capturing_groups(input_data):\n    pattern = r'(?:\\{[^}]*\\}|\\[[^\\]]*\\]|\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = non_capturing_groups(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05091977119445801}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapped_operation(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    reshaped_arr = arr.reshape(shape)\n    result = np.sum(reshaped_arr, axis=(1, 2))\n    return \"success\" if np.all(result % 2 == 0) else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapped_operation(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08763885498046875}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    dt = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return dt.strftime(\"%A\")\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.054792165756225586}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        circular_ref = { 'a': None }\n        circular_ref['a'] = circular_ref\n        json.dumps(circular_ref)\n        return str(parsed_data['data']['nested']['deep']['very']['deep']['value'])\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05311107635498047}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.groupby('city')['salary'].mean().sum()\n    return \"success\" if avg_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2734038829803467}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    seen = {}\n    def serialize(obj):\n        if isinstance(obj, dict):\n            if id(obj) in seen:\n                return {\"circular_reference\": True}\n            seen[id(obj)] = obj\n            return {k: serialize(v) for k, v in obj.items()}\n        if isinstance(obj, list):\n            return [serialize(v) for v in obj]\n        return obj\n    \n    try:\n        transformed = serialize(input_data)\n        return json.dumps(transformed)\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05123305320739746}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef performance_monitoring(data):\n    session = requests.Session()\n    retries = Retry(total=data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    try:\n        response = session.request(data['method'], data['url'], timeout=data['timeout'], verify=data['session_config']['verify'], stream=data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = performance_monitoring(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "performance_monitoring", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3581039905548096}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?:(\\w+)\\s+[^()]*?\\1|(\\w+)\\s+[^()]*?\\2)'\n    matches = re.findall(pattern, input_data['text'])\n    return str(len(matches))\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "3", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05177879333496094}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = current_time_operations(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05358123779296875}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    parsed = json.loads(input_data)\n    users = parsed.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052739858627319336}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['performance'] = df['performance'].astype(float)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    return \"success\" if avg_performance.max() > 4.0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.27837204933166504}
{"language": "python", "code": "import re\n\ndef group_and_capture(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'(\\w+@\\w+\\.\\w+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\)\\s*(\\d{3})-(\\d{4})', text)\n    if email_match and phone_match:\n        return f\"{email_match.group(1)};{phone_match.group(0)}\"\n    return \"not found\"\n\nresult = group_and_capture({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com;(555) 123-4567", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.031115055084228516}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if 'data' in data and isinstance(data['data'], dict):\n            if 'value' in data['data']['nested']['deep']['very']:\n                return \"success\"\n            return \"error\"\n        return \"error\"\n    except (json.JSONDecodeError, KeyError, TypeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.026782989501953125}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].mean(), inplace=True)\n    df['age'] = df['age'].astype(int)\n    return df['salary'].max() > 60000\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = missing_data_handling(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.34972691535949707}
{"language": "python", "code": "import re\n\ndef non_capturing_groups(input_data):\n    pattern = r'(?:\\'[^\\']*\\'|\"[^\"]*\")|(?:\\{[^}]*\\}|\\[[^\\]]*\\])'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = non_capturing_groups(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03202700614929199}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        status_forcelist=[500, 502, 503, 504],\n        backoff_factor=1\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 3.453795909881592}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed['data']['nested']['deep']['very']['deep']['value']\n        return value\n    except (KeyError, TypeError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05106306076049805}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    try:\n        data = json.loads(input_data)\n        active_users = sum(user['active'] for user in data['data']['users'])\n        return \"success\" if active_users > 0 else \"error\"\n    except (TypeError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050930023193359375}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05000782012939453}
{"language": "python", "code": "import numpy as np\n\ndef broadcasting_compatibility(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = tuple(input_data[\"shape\"])\n    if array.shape == shape:\n        return True\n    if np.broadcast_shapes(array.shape, shape) == shape:\n        return True\n    if array.ndim < len(shape):\n        return np.broadcast_shapes(array.shape, shape) == shape\n    return False\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = broadcasting_compatibility(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.10087800025939941}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.size == 0:\n        return \"error\"\n    mean = np.mean(array)\n    std_dev = np.std(array)\n    if std_dev == 0:\n        return \"constant\"\n    return round(mean / std_dev, 2)\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "1.94", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09234476089477539}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05427408218383789}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        value = data[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        if isinstance(value, int) and value == 42:\n            return \"success\"\n        return \"error\"\n    except (KeyError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0442812442779541}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    optimized_sum = np.sum(reshaped, axis=(0, 1))\n    mean_value = np.mean(optimized_sum)\n    is_broadcasting = np.array_equal(arr.shape, reshaped.shape)\n    return \"success\" if mean_value == 7 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.1404860019683838}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    arr = np.array(input_data[\"array\"])\n    return np.sum(arr)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.1399388313293457}
{"language": "python", "code": "import requests\n\ndef file_upload(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"POST\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    if url and isinstance(data, dict):\n        response = session.request(method, url, json=data, headers=headers, timeout=5)\n        return \"success\" if response.status_code == 200 else \"error\"\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_upload(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.8457551002502441}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype('int32')\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype('float32')\n    df['department'] = df['department'].astype('category')\n    df['city'] = df['city'].astype('category')\n    df['name'] = df['name'].astype('string')\n    \n    df['age'] = df['age'].where(df['age'] > 0, other=0)\n    df.drop_duplicates(subset='date', keep='first', inplace=True)\n    \n    performance_mean = df['performance'].mean()\n    return round(performance_mean, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "4.2", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.27689504623413086}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    retry = Retry(total=input_data[\"retries\"], backoff_factor=0.5)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(\n            method=input_data[\"method\"],\n            url=input_data[\"url\"],\n            timeout=input_data[\"timeout\"],\n            verify=input_data[\"session_config\"][\"verify\"],\n            stream=input_data[\"session_config\"][\"stream\"]\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.9718799591064453}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return (df['city'] == 'New York').sum()\n\nresult = simple_filtering({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23266196250915527}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = basic_aggregation({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23277807235717773}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    array = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = tuple(input_data['shape'])\n    if array.shape != shape:\n        return \"error\"\n    array = array.reshape(shape)\n    broadcasted = np.array([[1], [2]]) + array\n    if np.any(broadcasted > 15):\n        return True\n    return np.mean(array).astype(int)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "6", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09003496170043945}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_data = json.dumps(input_data)\n        parsed_data = json.loads(json_data)\n        return str(parsed_data['data']['nested']['deep']['very']['deep']['value'])\n    except (KeyError, TypeError):\n        return \"error\"\n    except OverflowError:\n        return \"overflow\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05082225799560547}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    return \"success\" if total_salary > 100000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2147812843322754}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        elif isinstance(obj, list):\n            return sum(count(item) for item in obj)\n        return 0\n\n    parsed_data = json.loads(input_data)\n    return count(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05071401596069336}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08984613418579102}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_str = json.dumps(input_data, ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        if isinstance(parsed_data, dict):\n            return str(parsed_data.get(\"data\", {}).get(\"nested\", {}).get(\"deep\", {}).get(\"very\", {}).get(\"deep\", {}).get(\"value\", 0))\n        return \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051651954650878906}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = simple_formatting(input_data)\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05447888374328613}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    arr = np.array(input_data[\"array\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_value = np.mean(arr)\n    return mean_value > 5\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0901179313659668}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = date_arithmetic(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.056147098541259766}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08864188194274902}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "4.5", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23276090621948242}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    avg_salary = df.groupby('city')['salary'].mean().fillna(0)\n    return avg_salary.idxmax() if not avg_salary.empty else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "New York", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23116493225097656}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df.drop_duplicates(subset=['date'], keep='last', inplace=True)\n    df['performance'] = df['performance'].clip(lower=0, upper=5)\n    df['department'] = df['department'].astype('category')\n    df.loc[df['name'].str.contains('é', na=False), 'name'] = 'Unicode'\n    return df['performance'].mean()\n\nresult = categorical_data_optimization({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]})\nprint(result)", "input": null, "output": "4.25", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23017287254333496}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef business_day_calculations(input_data):\n    date_string = input_data[\"date_string\"]\n    fmt = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    \n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.strptime(date_string, fmt)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        target_dt = local_dt.astimezone(target_tz)\n        \n        if target_dt.weekday() >= 5:\n            return \"weekend\"\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = business_day_calculations(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "business_day_calculations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07112407684326172}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?P<group1>\\w+)\\s+(?P=group1)|(?P<group2>[^\\W_]+)\\s+(?P=group2)'\n    text = input_data[\"text\"]\n    matches = re.findall(pattern, text)\n    return len(matches) > 0\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "False", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05152010917663574}
{"language": "python", "code": "import json\n\ndef simple_deserialization(input_data):\n    return json.loads(input_data)[\"data\"][\"age\"]\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = simple_deserialization(input_data)\nprint(result)", "input": null, "output": "30", "library": "json", "difficulty": "BEGINNER", "task_type": "simple_deserialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05076408386230469}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == 'New York'].shape[0]\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = simple_filtering(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23364877700805664}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051985979080200195}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08980488777160645}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        return value if isinstance(value, int) else \"error\"\n    except (KeyError, TypeError, ValueError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05210113525390625}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = basic_aggregation({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2353379726409912}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    array = np.array(input_data['array'], dtype=input_data['dtype'], order='C')\n    shape = tuple(input_data['shape'])\n    reshaped = array.reshape(shape)\n    mapped = np.memmap('temp.dat', dtype=reshaped.dtype, mode='w+', shape=reshaped.shape)\n    mapped[:] = reshaped\n    return np.sum(mapped) > 100\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09245109558105469}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.4850308895111084}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\b\\w+\\b(?:\\s*\\w+)*?'\n    matches = re.findall(pattern, text)\n    optimized_matches = [m for m in matches if len(m) > 5]\n    return len(optimized_matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "5", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05002403259277344}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09075617790222168}
{"language": "python", "code": "import pandas as pd\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values('date', inplace=True)\n    \n    df['avg_performance'] = df.groupby('department')['performance'].transform('mean')\n    df['high_performer'] = df['performance'] > df['avg_performance']\n    \n    return df['high_performer'].sum() > 2\n\ninput_data = {\n    \"data\": [\n        {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2},\n        {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8},\n        {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5},\n        {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0},\n        {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}\n    ],\n    \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]\n}\n\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "False", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23430180549621582}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.032876014709472656}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = streaming_requests(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3576061725616455}
{"language": "python", "code": "import requests\n\ndef file_upload(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(\n            method=input_data.get(\"method\", \"GET\"),\n            url=input_data[\"url\"],\n            json=input_data.get(\"data\"),\n            headers=input_data.get(\"headers\"),\n            timeout=5\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.ConnectionError, requests.Timeout):\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_upload(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29207396507263184}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3878111839294434}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0460202693939209}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcast_compatibility(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = input_data['shape']\n    target_shape = np.shape(arr)\n\n    if len(shape) != len(target_shape):\n        return False\n    \n    for s, t in zip(reversed(shape), reversed(target_shape)):\n        if s != t and s != 1 and t != 1:\n            return False\n            \n    return True\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = check_broadcast_compatibility(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07013082504272461}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2318892478942871}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"], order='C')\n    shape = tuple(input_data[\"shape\"])\n    reshaped_array = array.reshape(shape)\n    if reshaped_array.flags['C_CONTIGUOUS']:\n        return \"success\"\n    return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08997416496276855}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    max_performance = df.loc[df['salary'] > 0, 'performance'].max()\n    return 'error' if pd.isna(max_performance) else max_performance\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "4.7", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23055005073547363}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        return value\n    except (KeyError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05158233642578125}
{"language": "python", "code": "import re\n\ndef extract_contact_info(input_data):\n    text = input_data[\"text\"]\n    email = re.search(r'([\\w.-]+@[\\w.-]+)', text)\n    phone = re.search(r'\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}', text)\n    return \"success\" if email and phone else \"error\"\n\nresult = extract_contact_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "success", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0509943962097168}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"], timeout=1)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29523587226867676}
{"language": "python", "code": "import re\n\ndef parse_input(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:(?:\\'[^\\']*\\'|\"[^\"]*\")|(?:\\{[^}]*\\}|\\[[^\\]]*\\]))'\n    matches = re.findall(pattern, text)\n    if matches:\n        return str(len(matches))\n    return \"0\"\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = parse_input(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05121612548828125}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08992576599121094}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = column_selection({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2321929931640625}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0516202449798584}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    json_str = json.dumps(input_data, ensure_ascii=False)\n    parsed_data = json.loads(json_str)\n    value = parsed_data['data']['nested']['deep']['very']['deep']['value']\n    big_num = parsed_data['data']['numbers']['big']\n    if big_num > 1e18:\n        return \"big_number\"\n    circular_ref_test = {\"key\": \"value\"}\n    circular_ref_test['self'] = circular_ref_test\n    try:\n        json.dumps(circular_ref_test)\n    except (TypeError, OverflowError):\n        return \"circular_error\"\n    return value\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "big_number", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.035317182540893555}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return (df['city'] == 'New York').sum()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = simple_filtering(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22866129875183105}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_tz = pytz.timezone(input_data['date_string'].split()[-1])\n        naive_dt = datetime.datetime.strptime(input_data['date_string'][:-4], input_data['format'][:-3])\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data['target_timezone'])\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "2023-12-25 19:30:00", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07281279563903809}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    grouped = df.groupby('department').agg({'performance': 'mean'})\n    return grouped['performance'].max() > 4.0\n\nresult = custom_aggregations({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]})\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23154830932617188}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=1)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.4112701416015625}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = simple_formatting(input_data)\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.054058074951171875}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    df['department'] = df['department'].astype('category')\n    df['city'] = df['city'].astype('category')\n    df['name'] = df['name'].astype('category')\n    \n    df = df.loc[~df.duplicated(subset=['date', 'department'])]\n    high_performers = df[df['performance'] > 4.5].groupby('department').size()\n    return high_performers.count() > 0\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23189401626586914}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'fox', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05044198036193848}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?:(\\w+)\\s+\\1|(\\w+))'\n    text = input_data['text']\n    match = re.findall(pattern, text)\n    return str(len(match))\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "11", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04840707778930664}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05093693733215332}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday() == 6\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "False", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.055106163024902344}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n    salary_mean = df['salary'].mean()\n    performance_sum = df['performance'].sum()\n    total_age = df['age'].sum()\n    return \"success\" if (salary_mean > 0 and performance_sum > 0 and total_age > 0) else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2437140941619873}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df.loc[df['city'] == 'New York', 'salary'].sum()\n    return \"success\" if total_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23670482635498047}
{"language": "python", "code": "import json\n\nclass CustomObject:\n    def __init__(self, value):\n        self.value = value\n        self.circular_ref = self\n\ndef custom_object_serialization(obj):\n    if isinstance(obj, CustomObject):\n        return {\"custom_value\": obj.value}\n    raise TypeError(f\"Object of type {type(obj)} is not serializable\")\n\ndef function_name(input_data):\n    try:\n        json_str = json.dumps(input_data, default=custom_object_serialization)\n        deserialized = json.loads(json_str)\n        return len(str(deserialized))\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"], \"custom\": CustomObject(100)}\n\nresult = function_name(input_data)\nprint(result)", "input": null, "output": "321", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050708770751953125}
{"language": "python", "code": "import numpy as np\n\ndef process_structured_array(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    if arr.shape != tuple(shape):\n        return \"error\"\n    arr_flat = arr.flatten()\n    unique_values = np.unique(arr_flat)\n    return len(unique_values)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = process_structured_array(input_data)\nprint(result)", "input": null, "output": "12", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.10418415069580078}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed['data']['nested']['deep']['very']['deep']['value']\n        return str(value) if value == 42 else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03249716758728027}
{"language": "python", "code": "import numpy as np\n\ndef is_broadcast_compatible(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = np.array(input_data['shape'])\n    target_shape = np.broadcast_shapes(arr.shape, shape)\n    return target_shape == shape\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = is_broadcast_compatible(input_data)\nprint(result)", "input": null, "output": "[ True  True  True]", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09003281593322754}
{"language": "python", "code": "import requests\n\ndef authentication_handling(input_data):\n    try:\n        session = requests.Session()\n        response = session.request(input_data[\"method\"], input_data[\"url\"], json=input_data[\"data\"], headers=input_data[\"headers\"], timeout=5)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = authentication_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "authentication_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3550291061401367}
{"language": "python", "code": "import numpy as np\n\ndef process_data(input_data):\n    arr = np.array(input_data['array'])\n    if arr.shape == tuple(input_data['shape']):\n        return str(np.sum(arr) > 20)\n    return \"error\"\n\nresult = process_data({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "broadcasting_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09120798110961914}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = basic_aggregation(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23325228691101074}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcast_compatibility(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    target_shape = np.broadcast_shapes(arr.shape, shape)\n    return target_shape == shape\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = check_broadcast_compatibility(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09219622611999512}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(\n            method=input_data[\"method\"],\n            url=input_data[\"url\"],\n            timeout=input_data[\"timeout\"],\n            verify=input_data[\"session_config\"][\"verify\"],\n            stream=input_data[\"session_config\"][\"stream\"]\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.8679664134979248}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.request(input_data['method'], input_data['url'])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.8988189697265625}
{"language": "python", "code": "import numpy as np\n\ndef linear_algebra(input_data):\n    arr = np.array(input_data['array'])\n    if arr.shape != tuple(input_data['shape']):\n        return \"error\"\n    return np.linalg.det(arr) > 0\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = linear_algebra(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "linear_algebra", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09058904647827148}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values(by='date', inplace=True)\n    df['performance'] = df['performance'].astype(float)\n    max_performance = df['performance'].max()\n    filtered = df[df['salary'] > 0]\n    unique_cities = filtered['city'].nunique()\n    total_age = filtered['age'].sum()\n    if unique_cities > 1:\n        return f\"{max_performance:.1f} - {total_age}\"\n    return \"single city\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "4.7 - 120", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21954894065856934}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return True if isinstance(json_str, str) and json_str else False\n    except (TypeError, OverflowError):\n        return False\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04880499839782715}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    pattern = r'\\b(?:[^\\W\\d_]+(?:\\s+[^\\W\\d_]+)*)+\\b'\n    text = input_data[\"text\"]\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = atomic_groups(input_data)\nprint(result)", "input": null, "output": "5", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05179715156555176}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3227410316467285}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef business_day_calculations(input_data):\n    date_string = input_data[\"date_string\"]\n    fmt = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n\n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.strptime(date_string, fmt)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d\") == \"2023-12-25\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = business_day_calculations(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "business_day_calculations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07587218284606934}
{"language": "python", "code": "import re\n\ndef check_pattern_existence(input_data):\n    text = input_data[\"text\"]\n    pattern = r\"\\bname\\b|\\bage\\b|\\[.*?\\]|{'[^']*?'}|\\\".*?\\\"\"\n    match = re.search(pattern, text, re.UNICODE)\n    return bool(match)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = check_pattern_existence(input_data)\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "ADVANCED", "task_type": "lookahead_lookbehind", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05185079574584961}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.049165964126586914}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\nimport time\n\ndef measure_response_time(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=retries,\n        backoff_factor=1,\n        status_forcelist=[500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.perf_counter()\n    response = session.request(method, url, timeout=timeout, verify=session_config[\"verify\"], stream=session_config[\"stream\"])\n    elapsed_time = time.perf_counter() - start_time\n\n    return round(elapsed_time * 1000)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1663", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.816122055053711}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.06909799575805664}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05234789848327637}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0545649528503418}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean = np.mean(array)\n    std_dev = np.std(array)\n    return \"success\" if std_dev < mean else False\n\nresult = statistical_operations({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07114005088806152}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if \"data\" in data and isinstance(data[\"data\"], dict):\n            return \"success\" if data[\"data\"].get(\"numbers\", {}).get(\"int\") == 42 else \"error\"\n    except (ValueError, TypeError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05148196220397949}
{"language": "python", "code": "import re\n\ndef character_classes(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return \"found\" if email_match and phone_match else \"not found\"\n\nresult = character_classes({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "found", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051522016525268555}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        backoff_factor=1,\n        status_forcelist=[429, 500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n    \n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = streaming_requests(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.6585187911987305}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    session.headers.update(input_data.get(\"headers\", {}))\n    for _ in range(3):\n        try:\n            response = session.request(input_data[\"method\"], input_data[\"url\"], json=input_data.get(\"data\"), timeout=2)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.Timeout, requests.RequestException):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30779123306274414}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(float)\n    avg_performance = df['performance'].mean()\n    avg_salary = df['salary'].mean()\n    weighted_performance = (avg_performance * avg_salary) / (avg_salary + 1)\n    return round(weighted_performance, 2)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "4.24", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2744140625}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0424959659576416}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df['salary'].mean()\n    high_earners = df[df['salary'] > 60000].shape[0]\n    return \"success\" if avg_salary > 0 and high_earners > 1 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22965288162231445}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef custom_formatting(input_data):\n    date_string = input_data[\"date_string\"]\n    format_string = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    \n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.datetime.strptime(date_string, format_string)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = custom_formatting(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "custom_formatting", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07137799263000488}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return active_users\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05219292640686035}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052271127700805664}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052207231521606445}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, separators=(',', ':'), ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        if \"data\" in parsed_data and \"value\" in parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"]:\n            return parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"][\"value\"]\n        return \"error\"\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05022096633911133}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05415606498718262}
{"language": "python", "code": "import re\n\ndef non_capturing_groups(input_data):\n    text = input_data[\"text\"]\n    pattern = r\"(?:'[^']*'|\\\"[^\\\"]*\\\"|\\{[^}]*\\}|\\[[^\\]]*\\])\"\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = non_capturing_groups(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0517270565032959}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09133100509643555}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u00C0-\\u00FF]'\n    return len(re.findall(pattern, text))\n\nresult = count_unicode_matches({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05077314376831055}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3135097026824951}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        parsed = json.loads(json.dumps(input_data, separators=(',', ':')))\n        num = parsed[\"data\"][\"numbers\"][\"int\"]\n        unicode_str = parsed[\"data\"][\"special_chars\"]\n        circular_ref = {\"self\": None}\n        circular_ref[\"self\"] = circular_ref\n        json.dumps(circular_ref)\n        return \"success\" if num == 42 and \"café\" in unicode_str else \"error\"\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05167818069458008}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'quick', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05177807807922363}
{"language": "python", "code": "import numpy as np\n\ndef performance_improvement_ratio(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = tuple(input_data[\"shape\"])\n    new_array = np.zeros(shape, dtype=array.dtype)\n    new_array[:] = array\n    \n    before_time = np.sum(array)\n    after_time = np.sum(new_array)\n    \n    improvement = after_time / before_time if before_time != 0 else np.inf\n    return improvement\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_improvement_ratio(input_data)\nprint(result)", "input": null, "output": "1.0", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09119009971618652}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    session.verify = input_data[\"session_config\"][\"verify\"]\n    adapter = HTTPAdapter(max_retries=Retry(total=input_data[\"retries\"], backoff_factor=0.1))\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], timeout=input_data[\"timeout\"])\n        if response.status_code == 200:\n            return \"success\"\n        return \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"request_error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.359321117401123}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05170321464538574}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.groupby('city')['salary'].mean().sum()\n    return \"success\" if avg_salary > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2403409481048584}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07139992713928223}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?<!\\w)(?P<word>\\w{2,})(?P=word)(?!\\w)'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "0", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0492711067199707}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    shape = np.array(input_data[\"shape\"])\n    if arr.shape == tuple(shape):\n        return str(arr[1, 2]) + \" success\"\n    return \"error\"\n\nresult = advanced_indexing({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "6 success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08984589576721191}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    if input_data[\"edge_cases\"][0] == \"broadcasting\":\n        return np.sum(reshaped + reshaped[0], axis=0).sum() > 50\n    if input_data[\"edge_cases\"][1] == \"memory_layout\":\n        return arr.flags['C_CONTIGUOUS'] and arr.strides[0] == arr.itemsize * np.prod(arr.shape[1:])\n    return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.06706094741821289}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'\\w+@\\w+\\.\\w+', text)\n    phone_match = re.search(r'\\(\\d{3}\\)\\s?\\d{3}-\\d{4}', text)\n    if email_match and phone_match:\n        return \"success\"\n    return \"error\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "success", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05188298225402832}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'\\blazy\\b', 'active', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown fox jumps over the active dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.047876834869384766}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef test_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = test_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3740270137786865}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.drop_duplicates(subset=['date', 'name'])\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean()\n    return avg_performance.max() > 4.0\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23389315605163574}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return email_match is not None and phone_match is not None\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0543820858001709}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('city')['performance'].mean()\n    return avg_performance.max()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = calculate_performance_metric(input_data)\nprint(result)", "input": null, "output": "4.35", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23512482643127441}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.047661781311035156}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\nresult = simple_formatting({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0556180477142334}
{"language": "python", "code": "import numpy as np\n\ndef is_broadcastable(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = input_data['shape']\n    edge_case = input_data['edge_cases']\n    \n    if arr.shape != tuple(shape):\n        return False\n    \n    if \"broadcasting\" in edge_case:\n        try:\n            np.broadcast(arr, np.empty(shape))\n        except ValueError:\n            return False\n\n    if \"memory_layout\" in edge_case:\n        if arr.flags['C_CONTIGUOUS'] or arr.flags['F_CONTIGUOUS']:\n            return True\n\n    return True\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = is_broadcastable(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0912470817565918}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.8751211166381836}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\").lower()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    retries = 3\n    timeout = 5\n    \n    for _ in range(retries):\n        try:\n            response = session.request(method, url, json=data, headers=headers, timeout=timeout)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.Timeout, requests.ConnectionError):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 2.275547981262207}
{"language": "python", "code": "import pytz\nfrom datetime import datetime, timedelta\n\ndef check_dst(input_data):\n    date_string = input_data[\"date_string\"]\n    timezone = pytz.timezone(input_data[\"timezone\"])\n    operations = input_data[\"operations\"]\n\n    naive_dt = datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n    aware_dt = timezone.localize(naive_dt)\n\n    for op in operations:\n        if op == \"add_days\":\n            aware_dt += timedelta(days=1)\n        elif op == \"convert_timezone\":\n            aware_dt = aware_dt.astimezone(pytz.utc)\n        elif op == \"handle_ambiguous\":\n            aware_dt = timezone.normalize(aware_dt)\n\n    return aware_dt.dst() != timedelta(0)\n\ninput_data = {\"date_string\": \"2023-03-12 02:30:00\", \"timezone\": \"US/Eastern\", \"operations\": [\"add_days\", \"convert_timezone\", \"handle_ambiguous\"]}\nresult = check_dst(input_data)\nprint(result)", "input": null, "output": "True", "library": "datetime", "difficulty": "ADVANCED", "task_type": "complex_timezone_conversions", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07336091995239258}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef custom_formatting(input_data):\n    date_string = input_data.get(\"date_string\")\n    format_string = input_data.get(\"format\")\n    target_timezone = input_data.get(\"target_timezone\")\n    \n    if not date_string or not format_string or not target_timezone:\n        return \"error\"\n    \n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.strptime(date_string, format_string)\n        aware_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        converted_dt = aware_dt.astimezone(target_tz)\n        return converted_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = custom_formatting(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "custom_formatting", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.04154801368713379}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', text)\n    return email_match is not None and phone_match is not None\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.050848960876464844}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = date_arithmetic({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05598092079162598}
{"language": "python", "code": "import numpy as np\n\ndef measure_performance_improvement(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    edge_cases = input_data[\"edge_cases\"]\n    \n    baseline = np.sum(arr)\n    optimized = np.sum(arr.reshape(shape))\n    \n    if \"broadcasting\" in edge_cases:\n        arr2 = np.random.rand(3, 2, 1)\n        optimized += np.sum(arr + arr2)\n    \n    if \"memory_layout\" in edge_cases:\n        arr = np.asfortranarray(arr)\n        optimized += np.sum(arr)\n    \n    return optimized / baseline\n\nresult = measure_performance_improvement({\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]})\nprint(result)", "input": null, "output": "3.0743770479501435", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.10184192657470703}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2399580478668213}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.groupby('city')['salary'].mean().sum()\n    return 'above average' if avg_salary > 50000 else 'below average'\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "above average", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23360300064086914}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = column_selection(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23973703384399414}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_value = np.mean(array)\n    return mean_value > 5\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09047698974609375}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03605985641479492}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef custom_formatting(input_data):\n    date_string = input_data['date_string']\n    fmt = input_data['format']\n    target_timezone = input_data['target_timezone']\n    \n    try:\n        local_tz = pytz.timezone('EST')\n        naive_dt = datetime.datetime.strptime(date_string, fmt)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = custom_formatting(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "custom_formatting", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07375693321228027}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return True if isinstance(json_str, str) and json_str else \"success\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05111503601074219}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    total_salary = df['salary'].sum()\n    return \"success\" if total_salary > 100000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.30004382133483887}
{"language": "python", "code": "import re\n\ndef advanced_backreferences(input_data):\n    pattern = r'(?P<first>\\w+)\\s+(?P=first)'\n    text = input_data['text']\n    matches = re.findall(pattern, text)\n    count = len(matches)\n    pattern_unicode = r'(?P<unicode>[^\\W\\d_]+)\\s+(?P=unicode)'\n    matches_unicode = re.findall(pattern_unicode, text)\n    count_unicode = len(matches_unicode)\n    return str(count + count_unicode)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = advanced_backreferences(input_data)\nprint(result)", "input": null, "output": "0", "library": "re", "difficulty": "EXPERT", "task_type": "advanced_backreferences", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03081798553466797}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    mapped_arr = np.memmap('temp_file.dat', dtype=input_data[\"dtype\"], mode='w+', shape=input_data[\"shape\"])\n    np.copyto(mapped_arr, arr)\n    return str(mapped_arr.flags['C_CONTIGUOUS'])\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08958911895751953}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    return np.array(input_data[\"array\"]).reshape(input_data[\"shape\"]).size\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08214879035949707}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\nimport time\n\ndef measure_response_time(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        backoff_factor=1,\n        status_forcelist=[500, 502, 503, 504],\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.time()\n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        response.raise_for_status()\n    except requests.RequestException:\n        return \"error\"\n    return round(time.time() - start_time, 2)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1.22", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3612620830535889}
{"language": "python", "code": "import numpy as np\n\ndef structured_arrays(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = input_data['shape']\n    arr = arr.reshape(shape)\n    total_sum = np.sum(arr)\n    return \"success\" if total_sum > 0 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = structured_arrays(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08236479759216309}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].lower()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n    \n    session = requests.Session()\n    retry_strategy = Retry(total=retries, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 2.181699275970459}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].mean(), inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance_rank'] = df.groupby('department')['performance'].rank(method='max')\n    avg_performance = df.groupby('city')['performance'].mean()\n    highest_performance_city = avg_performance.idxmax()\n    highest_avg_performance = avg_performance.max()\n    performance_threshold = 4.0\n    count_above_threshold = (df['performance'] > performance_threshold).sum()\n    return f\"{highest_performance_city}: {count_above_threshold}\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "New York: 3", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3202550411224365}
{"language": "python", "code": "import json\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, set):\n            return list(obj)\n        if hasattr(obj, '__dict__'):\n            return obj.__dict__\n        return super().default(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        serialized = json.dumps(input_data, cls=CustomEncoder)\n        deserialized = json.loads(serialized)\n        if 'circular_refs' in deserialized.get('edge_cases', []):\n            return \"error\"\n        if deserialized['data']['numbers']['float'] != 3.14159:\n            return \"error\"\n        return \"success\"\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03346514701843262}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict) and 'data' in data:\n            value = data['data']['numbers']['int']\n            return \"success\" if value == 42 else \"error\"\n    except (ValueError, KeyError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.044760942459106445}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef test_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], \n                                    timeout=input_data['timeout'], \n                                    verify=input_data['session_config']['verify'], \n                                    stream=input_data['session_config']['stream'])\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = test_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.29579496383667}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.match(r'The quick brown fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03365302085876465}
{"language": "python", "code": "import re\n\ndef non_capturing_groups(input_data):\n    pattern = r'(?:\\{.*?\\}|\\[.*?\\]|\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = non_capturing_groups(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "non_capturing_groups", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.02742481231689453}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef business_day_calculations(input_data):\n    date_string = input_data[\"date_string\"]\n    format_string = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    \n    try:\n        local_tz = pytz.timezone('EST')\n        naive_datetime = datetime.strptime(date_string, format_string)\n        local_datetime = local_tz.localize(naive_datetime)\n        utc_datetime = local_datetime.astimezone(pytz.utc)\n        return \"success\" if utc_datetime.hour < 17 else \"error\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = business_day_calculations(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "business_day_calculations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.050985097885131836}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.032267093658447266}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    average_age = df['age'].mean()\n    if total_salary > 100000 and average_age > 30:\n        return \"success\"\n    return \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.30950307846069336}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07878708839416504}
{"language": "python", "code": "import numpy as np\n\ndef structured_array_analysis(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    if arr.shape != tuple(input_data['shape']):\n        return \"error\"\n    broadcast_test = np.broadcast_to(arr, (2, 3, 2, 2)).shape == (2, 3, 2, 2)\n    layout = arr.flags['C_CONTIGUOUS']\n    return \"success\" if broadcast_test and layout else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = structured_array_analysis(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07497000694274902}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data[\"retries\"],\n        backoff_factor=1,\n        status_forcelist=[500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n    \n    try:\n        response = session.request(\n            method=input_data[\"method\"],\n            url=input_data[\"url\"],\n            timeout=input_data[\"timeout\"],\n            verify=input_data[\"session_config\"][\"verify\"],\n            stream=input_data[\"session_config\"][\"stream\"]\n        )\n        if response.ok:\n            return \"success\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3415558338165283}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values(by='date').drop_duplicates(subset='date', keep='last')\n    avg_performance = df['performance'].mean()\n    return \"success\" if avg_performance >= 4.0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3156931400299072}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    class CircularReference:\n        pass\n\n    circular_ref = CircularReference()\n    circular_ref.self = circular_ref\n    input_data['circular'] = circular_ref\n\n    try:\n        serialized = json.dumps(input_data, default=lambda o: str(o) if isinstance(o, CircularReference) else None)\n        return \"success\" if \"circular\" in serialized else \"error\"\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.02943110466003418}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values('date', inplace=True)\n    performance_avg = df['performance'].mean()\n    high_performers = df[df['performance'] > performance_avg]\n    unique_departments = high_performers['department'].nunique()\n    return unique_departments\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "1", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2958261966705322}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u00C0-\\u017F]'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03285098075866699}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    idx = np.array([0, 1, 2])\n    selected_values = arr[idx, idx]\n    return int(selected_values.sum() > 15)\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "0", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.06576418876647949}
{"language": "python", "code": "import numpy as np\n\ndef process_array(input_data):\n    arr = np.array(input_data['array'])\n    if arr.size == 0:\n        return \"error\"\n    mean_value = np.mean(arr)\n    max_value = np.max(arr)\n    return \"success\" if mean_value > max_value / 2 else False\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = process_array(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "broadcasting_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07993698120117188}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef leap_year_edge_cases(input_data):\n    date_string = input_data[\"date_string\"]\n    timezone = pytz.timezone(input_data[\"timezone\"])\n    operations = input_data[\"operations\"]\n    \n    naive_dt = datetime.datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n    aware_dt = timezone.localize(naive_dt)\n\n    for operation in operations:\n        if operation == \"add_days\":\n            aware_dt += datetime.timedelta(days=1)\n        elif operation == \"convert_timezone\":\n            aware_dt = aware_dt.astimezone(pytz.utc)\n        elif operation == \"handle_ambiguous\":\n            aware_dt = timezone.normalize(aware_dt)\n\n    return \"leap\" if aware_dt.year % 4 == 0 and (aware_dt.year % 100 != 0 or aware_dt.year % 400 == 0) else \"not leap\"\n\ninput_data = {\"date_string\": \"2023-03-12 02:30:00\", \"timezone\": \"US/Eastern\", \"operations\": [\"add_days\", \"convert_timezone\", \"handle_ambiguous\"]}\nresult = leap_year_edge_cases(input_data)\nprint(result)", "input": null, "output": "not leap", "library": "datetime", "difficulty": "ADVANCED", "task_type": "leap_year_edge_cases", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.06918501853942871}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    pattern = r'\\b(\\w+)\\b'\n    matches = re.findall(pattern, input_data['text'])\n    unique_count = len(set(matches))\n    nested_pattern = r'\\(\\s*(?:\\(\\s*|\\w+\\s*)*\\)'\n    nested_matches = re.findall(nested_pattern, input_data['text'])\n    return str(unique_count + len(nested_matches))\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = atomic_groups(input_data)\nprint(result)", "input": null, "output": "12", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03526711463928223}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = column_selection(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.28297877311706543}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict):\n            if \"data\" in parsed and isinstance(parsed[\"data\"], dict):\n                return True\n    except (json.JSONDecodeError, TypeError):\n        return False\n    return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050691843032836914}
{"language": "python", "code": "import pytz\nfrom datetime import datetime\n\ndef calculate_time_difference(input_data):\n    date_string = input_data[\"date_string\"]\n    format_string = input_data[\"format\"]\n    target_timezone = pytz.timezone(input_data[\"target_timezone\"])\n    \n    try:\n        local_time = datetime.strptime(date_string, format_string)\n        local_time = pytz.timezone(\"EST\").localize(local_time)\n        utc_time = local_time.astimezone(target_timezone)\n        return int((utc_time - local_time).total_seconds() / 3600)\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = calculate_time_difference(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "timezone_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05809307098388672}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    try:\n        response = session.request(method=input_data[\"method\"], url=input_data[\"url\"], \n                                    timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], \n                                    stream=input_data[\"session_config\"][\"stream\"])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.4349300861358643}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.2993772029876709}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    idx = np.array([[0, 1], [2, 0]])\n    result = arr[idx]\n    return str(result.sum() > 15)\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09018683433532715}
{"language": "python", "code": "import pandas as pd\n\ndef aggregate_salary(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(float)\n    avg_salary = df.groupby('city')['salary'].mean()\n    return avg_salary.idxmax() if not avg_salary.empty else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = aggregate_salary(input_data)\nprint(result)", "input": null, "output": "New York", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2354109287261963}
{"language": "python", "code": "import re\n\ndef grouping_and_capturing(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\)\\s*(\\d{3})-(\\d{4})', text)\n    if email_match and phone_match:\n        return email_match.group(1) + ' ' + phone_match.group(2)\n    return \"error\"\n\nresult = grouping_and_capturing({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support 123", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04275202751159668}
{"language": "python", "code": "import pandas as pd\n\ndef pivot_salary_analysis(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    pivot_table = df.pivot_table(index='city', values='salary', aggfunc='sum')\n    return \"success\" if (pivot_table.sum().sum() > 0) else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = pivot_salary_analysis(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "pivot_tables", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23772192001342773}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08686494827270508}
{"language": "python", "code": "import requests\n\ndef authentication_handling(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            json=input_data['data'],\n            headers=input_data['headers'],\n            timeout=5\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = authentication_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "authentication_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.6390259265899658}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2412421703338623}
{"language": "python", "code": "import json\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, (set, frozenset)):\n            return list(obj)\n        if isinstance(obj, complex):\n            return {\"real\": obj.real, \"imag\": obj.imag}\n        return super().default(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        input_data['data']['circular'] = input_data\n        json_str = json.dumps(input_data, cls=CustomEncoder)\n        return \"success\" if len(json_str) < 1000 else \"error\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04935193061828613}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09038209915161133}
{"language": "python", "code": "import numpy as np\n\ndef analyze_memory_view(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    view = arr.reshape(input_data[\"shape\"])\n    if view.flags['C_CONTIGUOUS']:\n        return \"C-contiguous\"\n    if view.flags['F_CONTIGUOUS']:\n        return \"F-contiguous\"\n    return \"non-contiguous\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = analyze_memory_view(input_data)\nprint(result)", "input": null, "output": "C-contiguous", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09145188331604004}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['performance'] = df['performance'].astype(float)\n    grouped = df.groupby('department').agg({'performance': 'mean', 'salary': 'sum'}).reset_index()\n    max_salary = grouped['salary'].max()\n    return \"success\" if max_salary > 100000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2509899139404297}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict) and 'data' in data:\n            if 'nested' in data['data'] and 'value' in data['data']['nested']['deep']['very']:\n                return \"success\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0493319034576416}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3137781620025635}
{"language": "python", "code": "import numpy as np\n\ndef is_broadcast_compatible(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    edge_cases = input_data[\"edge_cases\"]\n    target_shape = shape\n\n    if 'broadcasting' in edge_cases:\n        return np.broadcast(array, np.empty(target_shape)).shape == target_shape\n    \n    if 'memory_layout' in edge_cases:\n        return array.flags['C_CONTIGUOUS'] or array.flags['F_CONTIGUOUS']\n    \n    return False\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = is_broadcast_compatible(input_data)\nprint(result)", "input": null, "output": "[ True  True  True]", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09111404418945312}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return \"success\" if avg_performance > 4.0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2366499900817871}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'], errors='coerce')\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    recent_date = df['date'].max()\n    return \"success\" if total_salary > 0 and recent_date is not pd.NaT else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23532605171203613}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3964979648590088}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05104565620422363}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:(\\w+?)\\s*+(\\w+?))'\n    matches = re.findall(pattern, text)\n    unique_matches = len(set(matches))\n    return unique_matches\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "29", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05043768882751465}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"GET\").upper()\n    data = input_data.get(\"data\", {})\n    headers = input_data.get(\"headers\", {})\n    session = requests.Session()\n    \n    for _ in range(3):\n        try:\n            response = session.request(method, url, json=data, headers=headers, timeout=5)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.Timeout, requests.ConnectionError):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3002049922943115}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef check_adapter_functionality(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        backoff_factor=1,\n        status_forcelist=[500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n    session.verify = input_data['session_config']['verify']\n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], stream=input_data['session_config']['stream'])\n        return response.status_code == 200\n    except (requests.Timeout, requests.ConnectionError):\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = check_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.9589362144470215}
{"language": "python", "code": "import requests\n\ndef file_upload(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"POST\").upper()\n    data = input_data.get(\"data\", {})\n    headers = input_data.get(\"headers\", {})\n    \n    if not url or not isinstance(data, dict):\n        return \"error\"\n    \n    session = requests.Session()\n    try:\n        response = session.request(method, url, json=data, headers=headers, timeout=5)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_upload(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.4909799098968506}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef business_day_calculations(input_data):\n    date_string = input_data[\"date_string\"]\n    date_format = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    \n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_date = datetime.strptime(date_string, date_format)\n        aware_date = local_tz.localize(naive_date)\n        target_tz = pytz.timezone(target_timezone)\n        converted_date = aware_date.astimezone(target_tz)\n        return converted_date.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = business_day_calculations(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "business_day_calculations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0766448974609375}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].median(), inplace=True)\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean()\n    high_performers = avg_performance[avg_performance > 4.0].count()\n    return \"success\" if high_performers > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.30600500106811523}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef certificate_handling(data):\n    session = requests.Session()\n    retries = Retry(total=data['retries'], backoff_factor=0.5)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    try:\n        response = session.request(data['method'], data['url'], timeout=data['timeout'], verify=data['session_config']['verify'], stream=data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except (requests.exceptions.Timeout, requests.exceptions.RequestException):\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.31955885887146}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'], errors='coerce')\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df['salary'].mean()\n    recent_date = df['date'].max()\n    return \"success\" if (avg_salary > 0 and recent_date is not pd.NaT) else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23904824256896973}
{"language": "python", "code": "import datetime\n\ndef get_weekday(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = get_weekday(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05381011962890625}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'quick|lazy', 'fast', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The fast brown fox jumps over the fast dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05054211616516113}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = column_selection({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.24064993858337402}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04925704002380371}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'\\b[\\w.-]+@[\\w.-]+\\.\\w{2,}\\b', text)\n    phone_match = re.search(r'\\(?\\d{3}\\)?\\s?\\d{3}-\\d{4}', text)\n    return email_match.group(0) if email_match else (phone_match.group(0) if phone_match else \"none\")\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.02477097511291504}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    performance_avg = df.groupby('department')['performance'].mean()\n    max_performance_dept = performance_avg.idxmax()\n    return max_performance_dept\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "Engineering", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.24102306365966797}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = array.reshape(input_data[\"shape\"])\n    mean_value = np.mean(reshaped)\n    return \"success\" if mean_value > 5 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08966588973999023}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    success_count = 0\n    try:\n        response = session.request(\n            method=input_data[\"method\"],\n            url=input_data[\"url\"],\n            json=input_data.get(\"data\"),\n            headers=input_data.get(\"headers\"),\n            timeout=5\n        )\n        if response.status_code == 200:\n            success_count += 1\n    except (requests.exceptions.RequestException, TypeError):\n        return \"error\"\n    return success_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.328078031539917}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    mean_value = np.mean(reshaped)\n    return int(mean_value > 5)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "1", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09065794944763184}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.match(r'The quick brown fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.02614617347717285}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?:(?<=\\S)\\s*|\\s*|(?=\\S))?(?P<word>[\\w\\u00C0-\\u017F]+)(?=\\s*|\\s*$)'\n    matches = re.finditer(pattern, text)\n    count = sum(1 for m in matches if m.group('word'))\n    return count\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "11", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04931211471557617}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\bfox\\b', input_data[\"text\"]))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "1", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0509488582611084}
{"language": "python", "code": "import pytz\nfrom datetime import datetime\n\ndef calculate_time_difference(input_data):\n    date_string = input_data[\"date_string\"]\n    format_string = input_data[\"format\"]\n    target_timezone = pytz.timezone(input_data[\"target_timezone\"])\n    \n    try:\n        local_time = datetime.strptime(date_string, format_string)\n        local_time = pytz.timezone(\"EST\").localize(local_time)\n        target_time = local_time.astimezone(target_timezone)\n        return int((target_time - local_time).total_seconds() / 3600)\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = calculate_time_difference(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "timezone_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05686020851135254}
{"language": "python", "code": "import requests\n\ndef file_uploads(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"POST\")\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    if not url or not isinstance(data, dict):\n        return \"error\"\n    \n    try:\n        with requests.Session() as session:\n            response = session.request(method, url, json=data, headers=headers, timeout=5)\n            return \"success\" if response.status_code == 200 else \"error\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_uploads(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.2917909622192383}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "4.5", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23170995712280273}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return (df['city'] == 'New York').sum()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = simple_filtering(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23836898803710938}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef adapter_functionality(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].lower()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(total=retries, backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3052468299865723}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].where(df['performance'] > 0, 0)\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return \"success\" if avg_performance > 4.0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2380208969116211}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        parsed_data = json.loads(json.dumps(input_data, ensure_ascii=False))\n        circular_check = (parsed_data[\"edge_cases\"] == [\"circular_refs\", \"precision_loss\", \"unicode_handling\"])\n        value = parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        is_float = isinstance(parsed_data[\"data\"][\"numbers\"][\"float\"], float)\n        return str(value) if circular_check and is_float else \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050581932067871094}
{"language": "python", "code": "import re\n\ndef extract_contact_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'(\\w+@\\w+\\.\\w+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\) (\\d{3})-(\\d{4})', text)\n    return email_match.group(0) if email_match else (phone_match.group(0) if phone_match else \"none\")\n\nresult = extract_contact_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051409244537353516}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    class CustomEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, dict) and 'circular_refs' in obj:\n                return \"error\"\n            return super().default(obj)\n\n    try:\n        json_str = json.dumps(input_data, cls=CustomEncoder)\n        return len(json_str)\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "304", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05183815956115723}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"], timeout=2)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29527997970581055}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = column_selection(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2364208698272705}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'quick', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04793691635131836}
{"language": "python", "code": "import numpy as np\n\ndef process_data(input_data):\n    arr = np.array(input_data[\"array\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    sum_value = np.sum(arr)\n    avg_value = np.mean(arr)\n    return float(sum_value > avg_value)\n\nresult = process_data({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "1.0", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "broadcasting_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09082388877868652}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    emails = re.findall(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phones = re.findall(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return len(emails) > 0 and len(phones) > 0\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04914522171020508}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    if active_users > 0:\n        return \"success\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.026222944259643555}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2360372543334961}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r\"fox\", input_data[\"text\"]))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.027547121047973633}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    df['rank'] = df.groupby('department')['performance'].rank(method='max')\n    avg_performance = df.groupby('department')['performance'].mean()\n    high_performers = df[df['performance'] > avg_performance[df['department']].values]\n    return len(high_performers)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21804428100585938}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return len(json.dumps(input_data, indent=4))\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "65", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05102396011352539}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    df = df.sort_values(by='date').drop_duplicates(subset=['date'], keep='last')\n    avg_performance = df['performance'].mean()\n    high_performers = df[df['performance'] > avg_performance]\n    return \"success\" if not high_performers.empty else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2348158359527588}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict) and 'data' in data:\n            value = data['data']['nested']['deep']['very']['deep']['value']\n            if isinstance(value, int) and value == 42:\n                return True\n        return False\n    except (json.JSONDecodeError, KeyError, TypeError):\n        return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05106496810913086}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = get_day_of_week({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05381417274475098}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df.shape[0]\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23492813110351562}
{"language": "python", "code": "import numpy as np\n\ndef process_structured_array(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    broadcasted = reshaped + np.arange(reshaped.shape[0]).reshape(-1, 1, 1)\n    result = np.sum(broadcasted) % 2\n    return bool(result)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = process_structured_array(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.20784902572631836}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'quick', 'slow', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The slow brown fox jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.029282093048095703}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = tuple(input_data[\"shape\"])\n    if arr.shape != shape:\n        return \"error\"\n    mapped = np.memmap('temp.dat', dtype=input_data[\"dtype\"], mode='w+', shape=shape)\n    mapped[:] = arr\n    return np.sum(mapped) > 30\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09485483169555664}
{"language": "python", "code": "import pandas as pd\n\ndef pivot_salary_average(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.pivot_table(index='city', values='salary', aggfunc='mean')\n    return \"success\" if avg_salary['salary'].max() > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = pivot_salary_average(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "pivot_tables", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.28786206245422363}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\nimport time\n\ndef measure_response_time(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].lower()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n    \n    session = requests.Session()\n    retry_strategy = Retry(\n        total=retries,\n        backoff_factor=0.1,\n        status_forcelist=[500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.time()\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        response.raise_for_status()\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\n    return round(time.time() - start_time, 2)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1.17", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3388280868530273}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef leap_year_edge_cases(input_data):\n    date_string = input_data[\"date_string\"]\n    timezone = pytz.timezone(input_data[\"timezone\"])\n    operations = input_data[\"operations\"]\n\n    naive_dt = datetime.datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n    aware_dt = timezone.localize(naive_dt)\n\n    for operation in operations:\n        if operation == \"add_days\":\n            aware_dt += datetime.timedelta(days=1)\n        elif operation == \"convert_timezone\":\n            aware_dt = aware_dt.astimezone(pytz.UTC)\n        elif operation == \"handle_ambiguous\":\n            aware_dt = timezone.normalize(aware_dt)\n\n    return \"valid\" if aware_dt.year % 4 == 0 and (aware_dt.year % 100 != 0 or aware_dt.year % 400 == 0) else \"invalid\"\n\ninput_data = {\"date_string\": \"2023-03-12 02:30:00\", \"timezone\": \"US/Eastern\", \"operations\": [\"add_days\", \"convert_timezone\", \"handle_ambiguous\"]}\nresult = leap_year_edge_cases(input_data)\nprint(result)", "input": null, "output": "invalid", "library": "datetime", "difficulty": "ADVANCED", "task_type": "leap_year_edge_cases", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.16742610931396484}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_performance = df.loc[df['salary'] > 0, 'performance'].mean()\n    return \"success\" if avg_performance > 4 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2838428020477295}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.5)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], \n                                    timeout=input_data['timeout'], \n                                    verify=input_data['session_config']['verify'], \n                                    stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.7393217086791992}
{"language": "python", "code": "import numpy as np\n\ndef process_memory_view(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    view = reshaped[:, :, 1]\n    broadcasted = view + 1\n    return int(np.sum(broadcasted))\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = process_memory_view(input_data)\nprint(result)", "input": null, "output": "48", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08966469764709473}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23540520668029785}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05107712745666504}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == \"New York\"].shape[0]\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = simple_filtering(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23224711418151855}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, separators=(',', ':'), ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        deep_value = parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        return deep_value\n    except (KeyError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.039891958236694336}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.2985060214996338}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.24072694778442383}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    indices = np.array([[0, 1], [1, 2]])\n    result = array[indices[:, 0], indices[:, 1]].sum()\n    return result\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "8", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07026004791259766}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    version = data.get(\"data\", {}).get(\"metadata\", {}).get(\"version\", \"0\")\n    return str(active_users) + version[0]\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "11", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.047743797302246094}
{"language": "python", "code": "import pandas as pd\n\ndef pivot_and_calculate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    pivot = df.pivot_table(index='city', values='salary', aggfunc='sum')\n    return \"success\" if pivot.loc['New York'][0] > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = pivot_and_calculate(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "pivot_tables", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23654985427856445}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05061674118041992}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    edge_cases = input_data[\"edge_cases\"]\n    \n    if shape.size != arr.ndim or not np.array_equal(shape, arr.shape):\n        return \"error\"\n    \n    if \"broadcasting\" in edge_cases:\n        arr2 = np.ones((1, 2, 2), dtype=arr.dtype)\n        result_broadcast = arr + arr2\n        if result_broadcast.shape != arr.shape:\n            return \"error\"\n    \n    if \"memory_layout\" in edge_cases:\n        arr_T = np.asfortranarray(arr)\n        if arr_T.flags['C_CONTIGUOUS']:\n            return \"error\"\n    \n    return np.sum(arr).astype(int)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "78", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09110903739929199}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(data):\n    session = requests.Session()\n    url = data.get(\"url\")\n    method = data.get(\"method\")\n    response_count = 0\n    \n    if url and isinstance(url, str):\n        for _ in range(3):\n            try:\n                response = session.request(method, url, json=data.get(\"data\"), headers=data.get(\"headers\"), timeout=2)\n                if response.status_code == 200:\n                    response_count += 1\n            except (requests.Timeout, requests.RequestException):\n                continue\n    return response_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "3", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.2851269245147705}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05133795738220215}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u00C0-\\u00FF]'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.050753116607666016}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_val = np.mean(array)\n    std_val = np.std(array)\n    return True if std_val > mean_val else False\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08929777145385742}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.31033992767333984}
{"language": "python", "code": "import requests\n\ndef file_uploads(input_data):\n    if not input_data.get(\"url\") or not isinstance(input_data.get(\"data\"), dict):\n        return \"error\"\n    \n    with requests.Session() as session:\n        try:\n            response = session.request(\n                method=input_data[\"method\"],\n                url=input_data[\"url\"],\n                json=input_data[\"data\"],\n                headers=input_data.get(\"headers\"),\n                timeout=5\n            )\n            return \"success\" if response.status_code == 200 else \"error\"\n        except requests.Timeout:\n            return \"timeout\"\n        except Exception:\n            return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = file_uploads(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "file_uploads", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.45342206954956055}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = tuple(input_data[\"shape\"])\n    arr = arr.reshape(shape)\n    if arr.flags['C_CONTIGUOUS']:\n        return True\n    return False\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09151601791381836}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03554487228393555}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        elif isinstance(obj, list):\n            return sum(count(i) for i in obj)\n        return 0\n    \n    parsed_data = json.loads(input_data)\n    return count(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051772117614746094}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30417299270629883}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['age'] = df['age'].astype(int)\n    valid_entries = df.dropna().shape[0]\n    return valid_entries > 2\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = missing_data_handling(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23587822914123535}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcast_compatibility(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = tuple(input_data[\"shape\"])\n    try:\n        np.broadcast_to(array, shape)\n        return True\n    except ValueError:\n        return False\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = check_broadcast_compatibility(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08982515335083008}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef leap_year_edge_cases(input_data):\n    date_str = input_data[\"date_string\"]\n    timezone = pytz.timezone(input_data[\"timezone\"])\n    dt = datetime.datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\n    \n    if dt.tzinfo is None:\n        dt = timezone.localize(dt)\n    else:\n        dt = dt.astimezone(timezone)\n\n    if \"add_days\" in input_data[\"operations\"]:\n        dt += datetime.timedelta(days=1)\n\n    if \"handle_ambiguous\" in input_data[\"operations\"]:\n        dt = timezone.normalize(dt)\n\n    return \"success\" if dt.year % 4 == 0 and (dt.year % 100 != 0 or dt.year % 400 == 0) else \"error\"\n\ninput_data = {\"date_string\": \"2023-03-12 02:30:00\", \"timezone\": \"US/Eastern\", \"operations\": [\"add_days\", \"convert_timezone\", \"handle_ambiguous\"]}\nresult = leap_year_edge_cases(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "ADVANCED", "task_type": "leap_year_edge_cases", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0759129524230957}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    successful_count = 0\n    try:\n        response = session.request(input_data.get(\"method\"), input_data.get(\"url\"), json=input_data.get(\"data\"), headers=input_data.get(\"headers\"), timeout=5)\n        if response.status_code == 200:\n            successful_count += 1\n    except (requests.exceptions.RequestException, ValueError):\n        return \"error\"\n    return successful_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.2880821228027344}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean()).astype('float32')\n    df['date'] = pd.to_datetime(df['date'])\n    df['department'] = df['department'].astype('category')\n    df['performance'] = df['performance'].clip(0, 5)\n    df.drop_duplicates(subset=['name', 'date'], keep='last', inplace=True)\n    df['name'] = df['name'].str.encode('utf-8').str.decode('utf-8')\n    return df['performance'].mean() > 4\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23509812355041504}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\{[^{}]*\\}|\\[[^\\[\\]]*\\]|\\'[^\\']*\\'|\\\"[^\\\"]*\\\"'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_info(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.029001951217651367}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['age'] = df['age'].astype(float)\n    df = df[df['salary'] > 55000]\n    return df.shape[0] > 1\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = missing_data_handling(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23982906341552734}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04844021797180176}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef advanced_streaming(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(\n            method=input_data[\"method\"],\n            url=input_data[\"url\"],\n            timeout=input_data[\"timeout\"],\n            verify=input_data[\"session_config\"][\"verify\"],\n            stream=input_data[\"session_config\"][\"stream\"]\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = advanced_streaming(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "advanced_streaming", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.425229787826538}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08707594871520996}
{"language": "python", "code": "import numpy as np\n\ndef performance_ratio(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    transformed = np.sum(array, axis=1)\n    optimized = np.mean(transformed) / (array.nbytes / transformed.nbytes)\n    return round(optimized, 2)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_ratio(input_data)\nprint(result)", "input": null, "output": "6.5", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08978390693664551}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json_data = json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051249027252197266}
{"language": "python", "code": "import re\n\ndef extract_contact_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', text)\n    return email_match.group(0) if email_match else \"not found\"\n\nresult = extract_contact_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.048501014709472656}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n    \n    session = requests.Session()\n    retry = Retry(total=retries, backoff_factor=0.1, status_forcelist={500, 502, 503, 504})\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.764068841934204}
{"language": "python", "code": "import json\n\ndef simple_deserialization(input_data):\n    return json.loads(input_data)[\"data\"][\"age\"]\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = simple_deserialization(input_data)\nprint(result)", "input": null, "output": "30", "library": "json", "difficulty": "BEGINNER", "task_type": "simple_deserialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050908803939819336}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, sort_keys=True)\n        parsed_data = json.loads(json_str)\n        if \"circular_refs\" in input_data[\"edge_cases\"]:\n            return \"error\"\n        if parsed_data[\"data\"][\"numbers\"][\"float\"] != 3.14159:\n            return \"error\"\n        return parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.029696941375732422}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\nimport time\n\ndef measure_response_time(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].upper()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(total=retries, backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.time()\n    response = session.request(method, url, timeout=timeout, verify=session_config[\"verify\"], stream=session_config[\"stream\"])\n    response.raise_for_status()\n    return round(time.time() - start_time, 2)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1.71", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.8678197860717773}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).strftime(\"%A\")\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = simple_formatting(input_data)\nprint(result)", "input": null, "output": "Monday", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05640006065368652}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcast_compatibility(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    if array.shape == tuple(shape):\n        return True\n    try:\n        np.broadcast_to(array, shape)\n        return True\n    except ValueError:\n        return False\n\nresult = check_broadcast_compatibility({\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]})\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08969330787658691}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, skipkeys=True, ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        if 'circular_refs' in parsed_data['edge_cases']:\n            return \"error\"\n        return parsed_data['data']['nested']['deep']['very']['deep']['value'] if 'precision_loss' not in parsed_data['edge_cases'] else 0\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\n\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05059003829956055}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    return array.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.05840182304382324}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    return arr[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09009480476379395}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.301177978515625}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df['department'] = df['department'].astype('category')\n    df['performance'] = df['performance'].clip(lower=0, upper=5)\n    unique_cities = df['city'].nunique()\n    total_performance = df['performance'].mean()\n    return \"success\" if total_performance > 4.0 and unique_cities > 2 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23848676681518555}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05142784118652344}
{"language": "python", "code": "import re\n\ndef count_nested_patterns(input_data):\n    pattern = r\"(?<=[{[\\s,])('.*?'|\\\".*?\\\")(.*?)(?=[}\\]\\s,])\"\n    matches = re.findall(pattern, input_data[\"text\"])\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = count_nested_patterns(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "recursive_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051164865493774414}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values(by='date').drop_duplicates(subset=['date', 'name'], keep='last')\n    avg_performance = df['performance'].mean()\n    return \"success\" if avg_performance > 4.0 else \"failure\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2356550693511963}
{"language": "python", "code": "from datetime import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_tz = pytz.timezone('EST')\n        naive_dt = datetime.strptime(input_data['date_string'], input_data['format'])\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data['target_timezone'])\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07607483863830566}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23673486709594727}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(-1)\n    mean_val = np.mean(reshaped)\n    edge_case_check = (arr.strides[0] > arr.strides[1])\n    return \"success\" if edge_case_check else str(mean_val)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09137296676635742}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    successful_count = 0\n    try:\n        response = session.request(input_data.get(\"method\", \"GET\"), input_data[\"url\"], json=input_data.get(\"data\"), headers=input_data.get(\"headers\"))\n        if response.ok:\n            successful_count += 1\n    except (requests.ConnectionError, requests.Timeout):\n        return \"error\"\n    return successful_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.35036802291870117}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_salary = df['salary'].max()\n    if avg_performance.max() > 4 and max_salary > 70000:\n        return \"success\"\n    return \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2162628173828125}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['performance'] = df['performance'].clip(0, 5)\n    avg_performance = df.groupby('department')['performance'].mean()\n    return \"success\" if avg_performance.max() > 4 else \"failure\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23787593841552734}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values('date').drop_duplicates('date', keep='first')\n    avg_performance = df['performance'].mean()\n    return \"success\" if avg_performance > 4 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23567414283752441}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone = re.search(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', text)\n    return email is not None and phone is not None\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051496028900146484}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_count > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052607059478759766}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    reshaped = arr.reshape(input_data['shape'])\n    if input_data['edge_cases'][0] == \"broadcasting\":\n        extra = np.array([[1], [2]])\n        result = reshaped + extra\n    else:\n        result = reshaped\n    return str(result.flags['F_CONTIGUOUS'])\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07786893844604492}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03490900993347168}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json_data = json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03334474563598633}
{"language": "python", "code": "import re\n\ndef check_pattern_existence(input_data):\n    text = input_data[\"text\"]\n    pattern = r\"\\{[^{}]*\\}|\\[[^\\[\\]]*\\]|'.*?'|\\\".*?\\\"\"\n    match = re.search(pattern, text, re.UNICODE)\n    return bool(match)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = check_pattern_existence(input_data)\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "ADVANCED", "task_type": "lookahead_lookbehind", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.034089088439941406}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    if data.get(\"data\") and isinstance(data[\"data\"], dict):\n        users = data[\"data\"].get(\"users\", [])\n        active_count = sum(1 for user in users if user.get(\"active\"))\n        return \"success\" if active_count > 0 else \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.032095909118652344}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"GET\").upper()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    session = requests.Session()\n    retries = requests.adapters.Retry(total=3, backoff_factor=1)\n    adapter = requests.adapters.HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n\n    try:\n        response = session.request(method, url, json=data, headers=headers, timeout=5)\n        return \"success\" if response.ok else \"error\"\n    except (requests.exceptions.Timeout, requests.exceptions.RequestException):\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.6547200679779053}
{"language": "python", "code": "import pandas as pd\n\ndef pivot_salary_analysis(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    pivot = df.pivot_table(values='salary', index='city', aggfunc='sum')\n    return \"success\" if pivot.loc['New York'][0] > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = pivot_salary_analysis(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "pivot_tables", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2894110679626465}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'\\S+@\\S+', text)\n    phone_match = re.search(r'\\(?\\d{3}\\)?\\s?\\d{3}-\\d{4}', text)\n    return email_match.group(0) if email_match else \"no email\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03439188003540039}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(method=input_data['method'], url=input_data['url'], json=input_data['data'], headers=input_data['headers'], timeout=5)\n        return 1 if response.status_code == 200 else 0\n    except (requests.RequestException, ValueError):\n        return 0\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.2967500686645508}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], stream=input_data['session_config']['stream'])\n        if response.status_code == 200:\n            return \"success\"\n        return \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"request_error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = streaming_requests(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3044049739837646}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1, status_forcelist={500, 502, 503, 504})\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], timeout=input_data['timeout'], **input_data['session_config'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.8712289333343506}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_count > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.034774065017700195}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict) and 'data' in data:\n            deep_value = data['data']['nested']['deep']['very']['deep']['value']\n            return \"success\" if deep_value == 42 else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.032618045806884766}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.4164719581604004}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json_data = json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\nresult = basic_error_handling('{\"data\": {\"name\": \"John\", \"age\": 30}}')\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03473472595214844}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def recursive_count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(recursive_count(v) for v in obj.values())\n        if isinstance(obj, list):\n            return sum(recursive_count(item) for item in obj)\n        return 0\n\n    parsed_data = json.loads(input_data)\n    return recursive_count(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05415701866149902}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    active_users = sum(1 for user in data['data']['users'] if user.get('active'))\n    version = data['data']['metadata'].get('version')\n    return \"success\" if active_users > 0 and version == \"1.0\" else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03277897834777832}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    shape = np.array(input_data[\"shape\"])\n    if array.shape != tuple(shape):\n        return \"error\"\n    indices = np.array([[0, 1], [1, 2], [2, 0]])\n    result = array[indices[:, 0], indices[:, 1]].sum()\n    return result % 10\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08182597160339355}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_data = json.dumps(input_data, separators=(',', ':'))\n        parsed_data = json.loads(json_data)\n        if 'value' in parsed_data['data']['nested']['deep']['very']:\n            return parsed_data['data']['nested']['deep']['very']['value']\n        if 'circular_refs' in parsed_data['edge_cases']:\n            return True\n        if 'precision_loss' in parsed_data['edge_cases']:\n            return False\n        return \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.035260915756225586}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean = np.mean(array)\n    std_dev = np.std(array)\n    return \"success\" if std_dev < mean else \"failure\"\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07807612419128418}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\nimport time\n\ndef measure_response_time(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    session.verify = session_config[\"verify\"]\n    session.stream = session_config[\"stream\"]\n    retry_strategy = Retry(total=retries, backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.perf_counter()\n    response = session.request(method, url, timeout=timeout)\n    elapsed_time = time.perf_counter() - start_time\n\n    return round(elapsed_time * 1000)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1173", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3189592361450195}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.030389785766601562}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_val = np.mean(array)\n    std_val = np.std(array)\n    return mean_val > std_val\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08016395568847656}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_salary = df['salary'].max()\n    high_performers = df[df['performance'] > 4.0].shape[0]\n    edge_case_check = any(df['date'].duplicated())\n    if edge_case_check:\n        return \"error\"\n    return int(avg_performance.max() > high_performers)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2824571132659912}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    reshaped_array = array.reshape(input_data[\"shape\"])\n    return reshaped_array.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08061003684997559}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    array = np.array(input_data['array'])\n    indices = np.array([[0, 1], [1, 2], [2, 0]])\n    result = array[indices[:, 0], indices[:, 1]].sum()\n    return \"success\" if result > 15 else \"error\"\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07953310012817383}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].median(), inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    max_perf = df.groupby('department', as_index=False)['performance'].max()\n    return max_perf['performance'].sum() > 20\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "False", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2955007553100586}
{"language": "python", "code": "import json\n\ndef encoding_success(input_data):\n    try:\n        json_data = json.dumps(input_data)\n        return True if json_data else False\n    except (TypeError, OverflowError):\n        return False\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = encoding_success(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03330707550048828}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    response = None\n    for _ in range(3):\n        try:\n            response = session.post(input_data[\"url\"], json=input_data[\"data\"], headers=input_data[\"headers\"], timeout=2)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.Timeout, requests.ConnectionError):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.33106112480163574}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    pattern = r'\\w+'\n    matches = re.findall(pattern, input_data['text'])\n    unicode_count = sum(1 for match in matches if any(ord(char) > 127 for char in match))\n    return unicode_count\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "3", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.033421993255615234}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).weekday()\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.03562808036804199}
{"language": "python", "code": "import numpy as np\n\ndef optimized_structured_array(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    total_sum = np.sum(reshaped)\n    return \"success\" if total_sum > 50 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = optimized_structured_array(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07778787612915039}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.03150796890258789}
{"language": "python", "code": "import numpy as np\n\ndef performance_ratio(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    original_shape = arr.shape\n    transformed = arr.reshape(-1, 2).mean(axis=1)\n    optimized_memory = transformed.nbytes / arr.nbytes\n    edge_case = np.all(transformed == arr.sum(axis=1).flatten() / 2)\n    return \"success\" if optimized_memory > 1 and edge_case else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_ratio(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0833737850189209}
{"language": "python", "code": "import pandas as pd\n\ndef count_rows(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return len(df)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = count_rows(input_data)\nprint(result)", "input": null, "output": "3", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_dataframe_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2910952568054199}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['department'] = df['department'].astype('category')\n    df.drop_duplicates(subset=['date', 'name'], keep='first', inplace=True)\n    performance_mean = df['performance'].mean()\n    return \"optimized\" if performance_mean > 4.0 else \"not optimized\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "optimized", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23612499237060547}
{"language": "python", "code": "import re\n\ndef count_nested_patterns(input_data):\n    text = input_data[\"text\"]\n    pattern = r\"(?P<quotes>'(?:\\\\'|[^'])*'|\\\"(?:\\\\\\\"|[^\\\"])*\\\")\"\n    matches = re.finditer(pattern, text)\n    count = sum(1 for match in matches)\n    return count\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = count_nested_patterns(input_data)\nprint(result)", "input": null, "output": "5", "library": "re", "difficulty": "ADVANCED", "task_type": "recursive_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04723691940307617}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.305056095123291}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['city'] = df['city'].astype('category')\n    df['department'] = df['department'].astype('category')\n    df['performance'] = df['performance'].clip(lower=0, upper=5)\n    salary_high = df['salary'].max()\n    performance_avg = df['performance'].mean()\n    df.loc[df['performance'] > performance_avg, 'status'] = 'above average'\n    df.loc[df['performance'] <= performance_avg, 'status'] = 'below average'\n    return df['status'].value_counts().get('above average', 0)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23342490196228027}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    arr = np.array(input_data['array'])\n    indices = np.array([[0, 1], [1, 2]])\n    selected = arr[indices]\n    return str(np.sum(selected) % 10)\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "0", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08870983123779297}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    active_users = sum(1 for user in data['data']['users'] if user.get('active'))\n    version = float(data['data']['metadata']['version'] or 0)\n    return \"success\" if active_users > 0 and version == 1.0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0519261360168457}
{"language": "python", "code": "import json\nimport sys\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, dict) and 'circular_refs' in obj:\n            raise ValueError(\"Circular reference detected\")\n        return super().default(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        serialized = json.dumps(input_data, cls=CustomEncoder)\n        return len(serialized)\n    except (ValueError, TypeError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "304", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051209211349487305}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0903921127319336}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    df['avg_performance'] = df.groupby('department')['performance'].transform('mean')\n    df['above_average'] = df['performance'] > df['avg_performance']\n    result = df['above_average'].sum() > 2\n    return result\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "False", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2360529899597168}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\", \"GET\").upper()\n    data = input_data.get(\"data\", {})\n    headers = input_data.get(\"headers\", {})\n\n    try:\n        response = session.request(method, url, json=data, headers=headers, timeout=2)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.Timeout, requests.ConnectionError):\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.7949018478393555}
{"language": "python", "code": "import pandas as pd\n\ndef categorical_data_optimization(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df['department'] = df['department'].astype('category')\n    df['performance'] = df['performance'].clip(0, 5)\n    unique_cities = df['city'].nunique()\n    duplicated_dates = df['date'].duplicated().sum()\n    if duplicated_dates > 0:\n        df = df[df['date'].duplicated(keep=False)]\n    return 'success' if unique_cities > 1 else 'error'\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = categorical_data_optimization(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "categorical_data_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23383879661560059}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = column_selection({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23302984237670898}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'([\\w\\.-]+)@([\\w\\.-]+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\) (\\d{3})-(\\d{4})', text)\n    return email_match.group(0) if email_match else (phone_match.group(0) if phone_match else \"none\")\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0514829158782959}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    successful_count = 0\n    for _ in range(3):\n        try:\n            response = session.request(\n                method=input_data.get(\"method\", \"GET\"),\n                url=input_data[\"url\"],\n                json=input_data.get(\"data\"),\n                headers=input_data.get(\"headers\"),\n                timeout=1\n            )\n            if response.status_code == 200:\n                successful_count += 1\n        except (requests.exceptions.RequestException, ValueError):\n            continue\n    return successful_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "3", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3972399234771729}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data[\"data\"])\n    return df[\"age\"].mean()\n\nresult = basic_aggregation({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2325441837310791}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    shape = tuple(input_data['shape'])\n    reshaped = arr.reshape(shape)\n    mean_value = np.mean(reshaped)\n    broadcast_test = (reshaped + 1).shape == shape\n    memory_layout = arr.flags['C_CONTIGUOUS']\n    return str(mean_value) if broadcast_test and memory_layout else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "6.5", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07152390480041504}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.890125036239624}
{"language": "python", "code": "import re\n\ndef grouping_and_capturing(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'([\\w.-]+@[\\w.-]+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\)\\s*(\\d{3})-(\\d{4})', text)\n    return email_match.group(0) if email_match else \"no email\"\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = grouping_and_capturing(input_data)\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05129098892211914}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df = df[df['date'].duplicated(keep='first') == False]\n    mean_performance = df['performance'].mean()\n    return \"success\" if mean_performance > 4.0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2325139045715332}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shaped_arr = arr.reshape(input_data[\"shape\"])\n    mem_map = np.lib.format.open_memmap('temp_array.npy', mode='w+', dtype=input_data[\"dtype\"], shape=input_data[\"shape\"])\n    mem_map[:] = shaped_arr\n    result = np.sum(mem_map) % 10\n    return result\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "8.0", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09657979011535645}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    try:\n        seen = set()\n        def handle_circular(obj):\n            if id(obj) in seen:\n                return \"circular_ref\"\n            seen.add(id(obj))\n            if isinstance(obj, dict):\n                return {k: handle_circular(v) for k, v in obj.items()}\n            if isinstance(obj, list):\n                return [handle_circular(i) for i in obj]\n            return obj\n        transformed = handle_circular(input_data)\n        return json.dumps(transformed).count(\"circular_ref\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "2", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050595998764038086}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df = df[df['salary'] > 0]\n    return df['performance'].max()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "4.7", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2680697441101074}
{"language": "python", "code": "from datetime import datetime\n\ndef date_arithmetic(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = date_arithmetic(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "date_arithmetic", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.09798693656921387}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == 'New York'].shape[0]\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = simple_filtering(input_data)\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2347431182861328}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = basic_aggregation(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2343580722808838}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].median())\n    df['date'] = pd.to_datetime(df['date'])\n    df = df[df['date'].duplicated(keep='first')]\n    df.loc[df['performance'] > 4.5, 'performance'] = df['performance'].clip(upper=4.5)\n    return \"success\" if df['salary'].mean() > 60000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21661090850830078}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.31621599197387695}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    if not users:\n        return \"error\"\n    active_users = sum(1 for user in users if user.get(\"active\", False))\n    return active_users\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0496830940246582}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    return array.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08932614326477051}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"], timeout=5)\n    return response.status_code == 200\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30129384994506836}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef performance_monitoring(input_data):\n    session = requests.Session()\n    retry = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(\n            method=input_data[\"method\"],\n            url=input_data[\"url\"],\n            timeout=input_data[\"timeout\"],\n            verify=input_data[\"session_config\"][\"verify\"],\n            stream=input_data[\"session_config\"][\"stream\"]\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = performance_monitoring(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "performance_monitoring", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3577449321746826}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        status_forcelist=[500, 502, 503, 504],\n        backoff_factor=1\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n    \n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3574597835540771}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    arr = np.array(input_data[\"array\"])\n    return arr.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09095501899719238}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby(['department'])['performance'].mean()\n    return \"success\" if avg_performance.max() > 4 else \"error\"\n\ndata = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = complex_transformations(data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23293399810791016}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04974102973937988}
{"language": "python", "code": "import numpy as np\n\ndef process_data(input_data):\n    arr = np.array(input_data[\"array\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_val = np.mean(arr)\n    return int(mean_val) if mean_val.is_integer() else round(mean_val, 2)\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = process_data(input_data)\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "broadcasting_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.05920696258544922}
{"language": "python", "code": "import numpy as np\n\ndef memory_view_test(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype'])\n    arr_view = arr.reshape(input_data['shape'])\n    if arr_view.flags['C_CONTIGUOUS']:\n        return \"C_CONTIGUOUS\"\n    return \"NOT_C_CONTIGUOUS\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_view_test(input_data)\nprint(result)", "input": null, "output": "C_CONTIGUOUS", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08931088447570801}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\b\\w{3}\\b', input_data['text']))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05084395408630371}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    parsed = json.loads(input_data)\n    users = parsed.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\", False))\n    return active_count\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05145883560180664}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    avg_salary = df['salary'].mean()\n    has_high_salary = (avg_salary > 60000)\n    return \"success\" if has_high_salary else \"error\"\n\nresult = datetime_operations({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]})\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23296689987182617}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        json_data = json.loads(input_data)\n    except (ValueError, TypeError):\n        return False\n    \n    if isinstance(json_data, dict):\n        if \"data\" in json_data and isinstance(json_data[\"data\"], dict):\n            if \"nested\" in json_data[\"data\"]:\n                return True\n    return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05154895782470703}
{"language": "python", "code": "from datetime import datetime\n\ndef simple_formatting(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).date()\n\nresult = simple_formatting({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "2023-12-25", "library": "datetime", "difficulty": "BEGINNER", "task_type": "simple_formatting", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.054533958435058594}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_data = json.dumps(input_data, default=lambda o: \"<circular>\")\n        parsed_data = json.loads(json_data)\n        if \"value\" in parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"]:\n            return parsed_data[\"data\"][\"nested\"][\"deep\"][\"very\"][\"value\"]\n        return \"error\"\n    except (TypeError, ValueError):\n        return False\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.049051761627197266}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = get_day_of_week(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05085635185241699}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.7445399761199951}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        deep_value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        int_value = parsed[\"data\"][\"numbers\"][\"int\"]\n        float_value = parsed[\"data\"][\"numbers\"][\"float\"]\n        return str(deep_value + int_value + int(float_value))\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "87", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0362091064453125}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\").lower()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    for _ in range(3):\n        try:\n            response = session.request(method, url, json=data, headers=headers, timeout=2)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.ConnectionError, requests.Timeout):\n            continue\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3042459487915039}
{"language": "python", "code": "import re\n\ndef count_unicode_matches(input_data):\n    text = input_data[\"text\"]\n    pattern = r'[\\u0080-\\uFFFF]'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = count_unicode_matches(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "EXPERT", "task_type": "unicode_categories", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05622076988220215}
{"language": "python", "code": "import pandas as pd\n\ndef performance_optimization(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    return avg_performance.idxmax()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "Engineering", "library": "pandas", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.28789210319519043}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08962392807006836}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], \n                                    timeout=input_data['timeout'], \n                                    verify=input_data['session_config']['verify'], \n                                    stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.5041632652282715}
{"language": "python", "code": "import numpy as np\n\ndef check_broadcasting_compatibility(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = tuple(input_data[\"shape\"])\n    target_array = np.empty(shape, dtype=array.dtype)\n    return np.broadcast(array, target_array).shape == target_array.shape\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = check_broadcasting_compatibility(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09182381629943848}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\b\\w+\\s+(\\w+)?\\s*+\\w+\\b'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052800655364990234}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.032087087631225586}
{"language": "python", "code": "import numpy as np\n\ndef measure_performance_improvement(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    \n    before = np.sum(arr)\n    transformed = arr.reshape(shape)\n    after = np.sum(transformed)\n    \n    ratio = after / before\n    edge_case_check = \"error\" if \"broadcasting\" in input_data[\"edge_cases\"] else \"success\"\n    \n    return ratio if edge_case_check == \"success\" else 0\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = measure_performance_improvement(input_data)\nprint(result)", "input": null, "output": "0", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08956003189086914}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == \"New York\"].shape[0]\n\nresult = simple_filtering({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23887395858764648}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    return \"success\" if total_salary > 100000 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21219730377197266}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    arr = np.array(input_data[\"array\"])\n    if arr.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_val = np.mean(arr)\n    std_dev = np.std(arr)\n    return \"success\" if std_dev > 0 else \"error\"\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09006214141845703}
{"language": "python", "code": "import requests\n\ndef status_code_checking(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3055710792541504}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    parsed_data = json.loads(input_data)\n    users = parsed_data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.049169063568115234}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30049729347229004}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30087900161743164}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    class CircularReference:\n        pass\n    circular_ref = CircularReference()\n    input_data['circular'] = circular_ref\n    try:\n        json.dumps(input_data)\n    except (TypeError, OverflowError):\n        return \"error\"\n    return \"success\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05116105079650879}
{"language": "python", "code": "import numpy as np\n\ndef advanced_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    indices = np.array([0, 1, 2])\n    result = arr[indices, indices].sum()\n    return result if arr.shape == tuple(input_data[\"shape\"]) else \"error\"\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = advanced_indexing(input_data)\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "advanced_indexing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09131979942321777}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    return avg_performance.max() > 4.0\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23615288734436035}
{"language": "python", "code": "import json\n\ndef circular_reference_handling(input_data):\n    class CircularRef:\n        pass\n\n    circular_ref = CircularRef()\n    input_data['circular'] = circular_ref\n    try:\n        json.dumps(input_data)\n    except (TypeError, ValueError):\n        return \"error\"\n    return \"success\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = circular_reference_handling(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "ADVANCED", "task_type": "circular_reference_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051167964935302734}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data[\"array\"])\n    return array[2]\n\ninput_data = {\"array\": [1, 2, 3, 4, 5], \"shape\": [5]}\nresult = simple_indexing(input_data)\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09347319602966309}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef test_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return response.status_code == 200\n    except requests.Timeout:\n        return False\n    except requests.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = test_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.6367249488830566}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef streaming_requests(input_data):\n    session = requests.Session()\n    retry = Retry(total=input_data[\"retries\"], backoff_factor=0.5)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = streaming_requests(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "streaming_requests", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3573851585388184}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data['url'])\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29744601249694824}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    shaped = array.reshape(input_data[\"shape\"])\n    return shaped.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09285235404968262}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.loc[df['salary'] > 0, 'performance'].mean()\n    return \"success\" if avg_performance > 4.0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2492661476135254}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05261492729187012}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if \"data\" in data and isinstance(data[\"data\"], dict):\n            number = data[\"data\"][\"numbers\"][\"int\"]\n            float_value = data[\"data\"][\"numbers\"][\"float\"]\n            if isinstance(float_value, float) and float_value != 3.14159:\n                return \"error\"\n            return number\n    except (json.JSONDecodeError, KeyError, TypeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05112290382385254}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == 'New York'].shape[0]\n\nresult = simple_filtering({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2432551383972168}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    url = input_data.get(\"url\")\n    method = input_data.get(\"method\").lower()\n    data = input_data.get(\"data\")\n    headers = input_data.get(\"headers\")\n    \n    if not url or method not in ['get', 'post']:\n        return \"error\"\n    \n    retries = 3\n    timeout = 2\n    \n    for _ in range(retries):\n        try:\n            response = session.request(method, url, json=data, headers=headers, timeout=timeout)\n            if response.status_code == 200:\n                return \"success\"\n        except (requests.Timeout, requests.ConnectionError):\n            continue\n    return \"failed\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.7859129905700684}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'lazy', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05118417739868164}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).weekday() == 6\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "False", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.054388999938964844}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    average_salary = df.groupby('city')['salary'].mean().max()\n    return \"High Salary\" if average_salary > 50000 else \"Low Salary\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "High Salary", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21490693092346191}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).weekday()\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05486011505126953}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    pattern = r'(?:(\\(\\(\\(\\)))|(?:(\\w+))|(?:(\\w+))'\n    matches = re.findall(pattern, input_data['text'])\n    return len([m for group in matches for m in group if m])\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = atomic_groups(input_data)\nprint(result)", "input": null, "output": "12", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05204200744628906}
{"language": "python", "code": "import numpy as np\n\ndef measure_performance_improvement(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    improved_array = array.reshape(shape)\n    edge_case_result = np.all(improved_array == array)\n    return \"success\" if edge_case_result else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = measure_performance_improvement(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "vectorization_tricks", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07933306694030762}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        backoff_factor=1,\n        status_forcelist=[500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n    \n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3251800537109375}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\nresult = basic_aggregation({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.20670008659362793}
{"language": "python", "code": "import re\n\ndef grouping_and_capturing(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'([\\w\\.-]+)@([\\w\\.-]+)', text)\n    phone_match = re.search(r'\\((\\d{3})\\)\\s*(\\d{3})-(\\d{4})', text)\n    email_exists = bool(email_match)\n    phone_exists = bool(phone_match)\n    return f\"Email: {email_exists}, Phone: {phone_exists}\"\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = grouping_and_capturing(input_data)\nprint(result)", "input": null, "output": "Email: True, Phone: True", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "grouping_and_capturing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0516667366027832}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(df['salary'].mean(), inplace=True)\n    return df['salary'].isnull().any()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = missing_data_handling(input_data)\nprint(result)", "input": null, "output": "False", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23983216285705566}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return True if isinstance(json_str, str) and len(json_str) > 0 else False\n    except (TypeError, OverflowError):\n        return False\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04857206344604492}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\bthe\\b', input_data['text'], re.IGNORECASE))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.047701120376586914}
{"language": "python", "code": "import re\n\ndef extract_age(input_data):\n    pattern = r\"'age':\\s*(\\d+)|\\\"age\\\":\\s*(\\d+)\"\n    matches = re.findall(pattern, input_data[\"text\"])\n    return int(matches[0][0] or matches[0][1]) if matches else 0\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_age(input_data)\nprint(result)", "input": null, "output": "30", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0513920783996582}
{"language": "python", "code": "import numpy as np\n\ndef custom_dtypes(input_data):\n    try:\n        arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n        reshaped = arr.reshape(input_data[\"shape\"])\n        result = np.sum(reshaped) if input_data[\"edge_cases\"] else np.mean(reshaped)\n        return \"success\" if result > 25 else \"error\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = custom_dtypes(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "ADVANCED", "task_type": "custom_dtypes", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0698080062866211}
{"language": "python", "code": "import numpy as np\n\ndef is_broadcast_compatible(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    target_shape = np.broadcast(arr.reshape(arr.shape), np.empty(shape)).shape\n    return target_shape == shape\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = is_broadcast_compatible(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "EXPERT", "task_type": "advanced_broadcasting", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08614015579223633}
{"language": "python", "code": "import pandas as pd\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    df['avg_performance'] = df.groupby('department')['performance'].transform('mean')\n    df['is_above_avg'] = df['performance'] > df['avg_performance']\n    df['rank'] = df['performance'].rank(method='min')\n    return df['is_above_avg'].any()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2328341007232666}
{"language": "python", "code": "import re\n\ndef extract_numbers(input_data):\n    text = input_data['text']\n    pattern = r'(?<!\\d)(\\d+)(?!\\d)'\n    numbers = re.findall(pattern, text)\n    return str(len(numbers))\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_numbers(input_data)\nprint(result)", "input": null, "output": "4", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.030926942825317383}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    if not data.get(\"data\"):\n        return \"error\"\n    users = data[\"data\"].get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\", False))\n    return active_count > 0\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0511472225189209}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['performance'] = df['performance'].astype(float)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.set_index('date', drop=False)\n    avg_performance = df['performance'].mean()\n    high_performers = df[df['performance'] > avg_performance]\n    return \"success\" if not high_performers.empty else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23666620254516602}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retry = Retry(total=input_data['retries'], backoff_factor=0.5)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"request_error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.339003086090088}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0).astype(int)\n    df['date'] = pd.to_datetime(df['date'])\n    total_salary = df['salary'].sum()\n    avg_age = df['age'].mean()\n    return \"success\" if total_salary > avg_age * len(df) else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23309731483459473}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1, status_forcelist={500, 502, 503, 504})\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"], timeout=input_data[\"timeout\"])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"request_error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.409804105758667}
{"language": "python", "code": "import pandas as pd\n\ndef simple_filtering(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df[df['city'] == 'New York'].shape[0]\n\nresult = simple_filtering({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]})\nprint(result)", "input": null, "output": "2", "library": "pandas", "difficulty": "BEGINNER", "task_type": "simple_filtering", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2387549877166748}
{"language": "python", "code": "import json\n\ndef pretty_printing(input_data):\n    return json.dumps(input_data, indent=4)\n\nresult = pretty_printing({\"data\": {\"name\": \"John\", \"age\": 30}})\nprint(result)", "input": null, "output": "{", "library": "json", "difficulty": "BEGINNER", "task_type": "pretty_printing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05147910118103027}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05215167999267578}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    try:\n        json_str = json.dumps(input_data, separators=(',', ':'))\n        parsed = json.loads(json_str)\n        if isinstance(parsed.get(\"data\"), dict):\n            deep_value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n            return deep_value\n    except (ValueError, TypeError):\n        return \"error\"\n    return 0\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03638315200805664}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    date = datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0555109977722168}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef business_day_calculations(input_data):\n    date_string = input_data[\"date_string\"]\n    format = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    \n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.datetime.strptime(date_string, format)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.weekday() < 5\n    except Exception:\n        return \"error\"\n\nresult = business_day_calculations({\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"})\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "business_day_calculations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07451701164245605}
{"language": "python", "code": "import json\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, dict):\n            return {k: self.default(v) for k, v in obj.items()}\n        if isinstance(obj, list):\n            return [self.default(v) for v in obj]\n        if isinstance(obj, str):\n            return obj.encode('utf-8').decode('utf-8')\n        return str(obj)\n\ndef custom_object_serialization(input_data):\n    try:\n        json_str = json.dumps(input_data, cls=CustomEncoder)\n        return len(json_str)\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_object_serialization(input_data)\nprint(result)", "input": null, "output": "304", "library": "json", "difficulty": "ADVANCED", "task_type": "custom_object_serialization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04970598220825195}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    array = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = array.reshape(input_data[\"shape\"])\n    integrated = np.trapz(reshaped, axis=0)\n    return float(np.sum(integrated))\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "52.0", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08858108520507812}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\nresult = basic_error_handling('{\"data\": {\"name\": \"John\", \"age\": 30}}')\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05130600929260254}
{"language": "python", "code": "import re\n\ndef extract_values(input_data):\n    pattern = r\"'(.*?)'|\\\"(.*?)\\\"|(\\d+)\"\n    matches = re.findall(pattern, input_data['text'])\n    extracted = [m[0] or m[1] or m[2] for m in matches]\n    return len(extracted)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_values(input_data)\nprint(result)", "input": null, "output": "9", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051171064376831055}
{"language": "python", "code": "import pandas as pd\n\ndef complex_window_functions(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values(['date'], inplace=True)\n    df['rank'] = df.groupby('department')['performance'].rank(method='dense')\n    avg_performance = df['performance'].mean()\n    return \"success\" if avg_performance > 4.0 else \"failure\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_window_functions(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "complex_window_functions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.24169182777404785}
{"language": "python", "code": "import requests\n\ndef get_status_code(input_data):\n    response = requests.get(input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = get_status_code({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "simple_get_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.8713791370391846}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    active_users = sum(1 for user in data['data']['users'] if user['active'])\n    version = data['data']['metadata']['version']\n    return \"success\" if active_users > 0 and version == \"1.0\" else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05097603797912598}
{"language": "python", "code": "import pandas as pd\n\ndef complex_transformations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df.sort_values(by='date', inplace=True)\n    df['performance'] = df['performance'].clip(lower=0)\n    if df.duplicated(subset='date').any():\n        return \"error\"\n    return df['performance'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = complex_transformations(input_data)\nprint(result)", "input": null, "output": "error", "library": "pandas", "difficulty": "ADVANCED", "task_type": "complex_transformations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2374269962310791}
{"language": "python", "code": "import pandas as pd\n\ndef basic_aggregation(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = basic_aggregation(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "basic_aggregation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23609304428100586}
{"language": "python", "code": "from datetime import datetime\n\ndef day_of_week(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).weekday()\n\ninput_data = {\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"}\nresult = day_of_week(input_data)\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05224609375}
{"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].replace({np.nan: 0})\n    df['performance'] = df['performance'].where(df['salary'] > 0, other=0)\n    max_performance = df['performance'].max()\n    return \"success\" if max_performance > 4 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.21672916412353516}
{"language": "python", "code": "import re\n\ndef extract_age(input_data):\n    match = re.search(r\"'age':\\s*(\\d+)\", input_data['text'])\n    return int(match.group(1)) if match else 0\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_age(input_data)\nprint(result)", "input": null, "output": "30", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.0518801212310791}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.28873610496520996}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        json_data = json.loads(input_data)\n        if isinstance(json_data, dict):\n            return all(isinstance(k, str) for k in json_data.keys())\n    except (json.JSONDecodeError, TypeError):\n        return False\n    return True\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05193281173706055}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef check_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = check_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.86704421043396}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        value = parsed[\"data\"][\"nested\"][\"deep\"][\"very\"][\"deep\"][\"value\"]\n        number_check = parsed[\"data\"][\"numbers\"][\"int\"]\n        return \"success\" if value == number_check else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05045890808105469}
{"language": "python", "code": "import requests\n\ndef status_code_checking(data):\n    response = requests.get(data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.30287909507751465}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    avg_performance = df['performance'].mean()\n    performance_threshold = 4.0\n    return avg_performance >= performance_threshold\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "True", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.28653907775878906}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    mapped = np.memmap('temp.dat', dtype=input_data[\"dtype\"], mode='w+', shape=input_data[\"shape\"])\n    mapped[:] = reshaped\n    optimized_sum = np.sum(mapped)\n    return \"success\" if optimized_sum > 0 else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09676408767700195}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_count > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05264019966125488}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = column_selection(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23551726341247559}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        obj = json.loads(input_data)\n        value = obj['data']['nested']['deep']['very']['deep']['value']\n        return value\n    except (KeyError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05067920684814453}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09154796600341797}
{"language": "python", "code": "import requests\n\ndef timeout_and_retries(input_data):\n    session = requests.Session()\n    retries = requests.adapters.Retry(total=3, backoff_factor=1)\n    adapter = requests.adapters.HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], json=input_data['data'], headers=input_data['headers'], timeout=5)\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.Timeout, requests.ConnectionError):\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = timeout_and_retries(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "timeout_and_retries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.314251184463501}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    email_pattern = r'[\\w\\.-]+@[\\w\\.-]+' \n    phone_pattern = r'\\(\\d{3}\\) \\d{3}-\\d{4}'\n    email_match = re.search(email_pattern, input_data['text'])\n    phone_match = re.search(phone_pattern, input_data['text'])\n    return email_match is not None and phone_match is not None\n\ninput_data = {\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"}\nresult = extract_info(input_data)\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "character_classes", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05352520942687988}
{"language": "python", "code": "import json\n\ndef encode_success(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return \"success\" if isinstance(json_str, str) else \"error\"\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = encode_success(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05027604103088379}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    session.headers.update(input_data.get(\"headers\", {}))\n    successful_requests = 0\n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], json=input_data.get(\"data\"), timeout=5)\n        if response.status_code == 200:\n            successful_requests += 1\n    except (requests.exceptions.RequestException, TypeError):\n        return \"error\"\n    return successful_requests\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.32057714462280273}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef test_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = test_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.8683691024780273}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = column_selection(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.28237199783325195}
{"language": "python", "code": "import re\n\ndef extract_age(input_data):\n    text = input_data[\"text\"]\n    match = re.search(r\"'age':\\s*(\\d+)\", text)\n    return int(match.group(1)) if match else 0\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = extract_age(input_data)\nprint(result)", "input": null, "output": "30", "library": "re", "difficulty": "ADVANCED", "task_type": "conditional_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051587820053100586}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(\\w+?)\\s*(?:(?=\\1\\w*)|(?=\\1))'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "0", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051107168197631836}
{"language": "python", "code": "import requests\n\ndef basic_post_request(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"], timeout=5)\n    return response.status_code\n\nresult = basic_post_request({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "basic_post_request", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3058030605316162}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.get(input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.29822468757629395}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef certificate_handling(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        status_forcelist=[500, 502, 503, 504],\n        backoff_factor=1\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = certificate_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "certificate_handling", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3376069068908691}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['salary'] = df['salary'].astype(int)\n    return df['salary'].max()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = missing_data_handling(input_data)\nprint(result)", "input": null, "output": "75000", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.28713083267211914}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef custom_formatting(input_data):\n    date_string = input_data[\"date_string\"]\n    format_string = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    \n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.datetime.strptime(date_string, format_string)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        target_dt = local_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = custom_formatting(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "custom_formatting", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07433605194091797}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df['salary'].mean()\n    max_age = df['age'].max()\n    return \"success\" if avg_salary > max_age else \"failure\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = datetime_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2348790168762207}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\b\\w{4}\\b', input_data['text']))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04820418357849121}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data[\"method\"], input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.5059692859649658}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    top_performer = df[df['salary'] > 0].nlargest(1, 'performance')\n    return str(top_performer['name'].values[0]) if not top_performer.empty else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "Eve", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23520398139953613}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data[\"data\"])\n    df['salary'].fillna(0, inplace=True)\n    average_performance = df.groupby('department')['performance'].mean()\n    top_department = average_performance.idxmax()\n    return top_department\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "Engineering", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23657011985778809}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'quick', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.049822092056274414}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    avg_performance = df.groupby('department')['performance'].mean().max()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "4.5", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2372579574584961}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    successful_count = 0\n    try:\n        response = session.request(\n            method=input_data.get(\"method\", \"GET\"),\n            url=input_data[\"url\"],\n            json=input_data.get(\"data\"),\n            headers=input_data.get(\"headers\"),\n            timeout=5\n        )\n        if response.status_code == 200:\n            successful_count += 1\n    except (requests.exceptions.RequestException, ValueError):\n        return \"error\"\n    finally:\n        session.close()\n    return successful_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 2.07379412651062}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict):\n            return \"success\" if \"data\" in data else \"error\"\n    except (json.JSONDecodeError, TypeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05060625076293945}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        json_str = json.dumps(input_data, ensure_ascii=False)\n        parsed_data = json.loads(json_str)\n        if isinstance(parsed_data, dict) and 'data' in parsed_data:\n            return str(parsed_data['data']['numbers']['int'])\n        return \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.052455902099609375}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\b\\w+\\'?s\\b'\n    matches = re.findall(pattern, text)\n    return len(matches)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "1", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.052892208099365234}
{"language": "python", "code": "import numpy as np\n\ndef statistical_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    if array.shape != tuple(input_data[\"shape\"]):\n        return \"error\"\n    mean_val = np.mean(array)\n    std_val = np.std(array)\n    return \"success\" if std_val > 0 and mean_val > 0 else False\n\ninput_data = {\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]}\nresult = statistical_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "statistical_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0906829833984375}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['date'] = pd.to_datetime(df['date'])\n    df['performance'] = df['performance'].astype(float)\n    avg_performance = df.groupby('department')['performance'].mean()\n    return round(avg_performance.max(), 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "4.5", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2391500473022461}
{"language": "python", "code": "from datetime import datetime\n\ndef current_time_operations(input_data):\n    return datetime.strptime(input_data[\"date_string\"], input_data[\"format\"]).weekday() == 0\n\nresult = current_time_operations({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "True", "library": "datetime", "difficulty": "BEGINNER", "task_type": "current_time_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05519580841064453}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\"))\n    version = data.get(\"data\", {}).get(\"metadata\", {}).get(\"version\")\n    if version == \"1.0\" and active_count > 0:\n        return \"success\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05133795738220215}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef performance_monitoring(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].upper()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry = Retry(total=retries, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n\n    response = session.request(method, url, timeout=timeout, **session_config)\n    \n    if response.ok:\n        return \"success\"\n    return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = performance_monitoring(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "performance_monitoring", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3219428062438965}
{"language": "python", "code": "import pandas as pd\n\ndef custom_aggregations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    agg_result = df.groupby(['department']).agg({'performance': 'mean', 'salary': 'sum'}).reset_index()\n    return \"success\" if (agg_result['performance'] > 4).any() else \"failure\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = custom_aggregations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "ADVANCED", "task_type": "custom_aggregations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2382669448852539}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_count > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050316810607910156}
{"language": "python", "code": "import pandas as pd\n\ndef advanced_indexing_tricks(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df['performance'] = df['performance'].clip(0, 5)\n    df['date'] = pd.to_datetime(df['date'])\n    avg_performance = df.groupby('department')['performance'].mean()\n    max_performance = avg_performance.max()\n    return 'success' if max_performance > 4 else 'error'\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = advanced_indexing_tricks(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "EXPERT", "task_type": "advanced_indexing_tricks", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23499178886413574}
{"language": "python", "code": "import re\n\ndef atomic_groups(input_data):\n    text = input_data[\"text\"]\n    pattern = r'\\b\\w+\\b|\\(\\(\\(\\)\\)\\)|\\w+'\n    matches = re.findall(pattern, text)\n    return str(len(matches))\n\nresult = atomic_groups({\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"})\nprint(result)", "input": null, "output": "12", "library": "re", "difficulty": "EXPERT", "task_type": "atomic_groups", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05162382125854492}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_tz = pytz.timezone(input_data['date_string'].split()[-1])\n        naive_dt = datetime.datetime.strptime(input_data['date_string'], input_data['format'])\n        aware_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data['target_timezone'])\n        target_dt = aware_dt.astimezone(target_tz)\n        return target_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07278895378112793}
{"language": "python", "code": "import json\n\ndef basic_error_handling(input_data):\n    try:\n        json.loads(input_data)\n        return \"success\"\n    except json.JSONDecodeError:\n        return \"error\"\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = basic_error_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_error_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05205893516540527}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\", False))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04877305030822754}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['date'] = pd.to_datetime(df['date'])\n    df['age'] = df['age'].astype(int)\n    return \"success\" if df['salary'].isnull().sum() == 0 else \"error\"\n\nresult = missing_data_handling({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]})\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23782610893249512}
{"language": "python", "code": "import json\n\ndef custom_json_extensions(input_data):\n    try:\n        parsed = json.loads(json.dumps(input_data))\n        if 'data' in parsed and 'value' in parsed['data']['nested']['deep']['very']:\n            return parsed['data']['nested']['deep']['very']['value']\n        if 'edge_cases' in parsed and 'circular_refs' in parsed['edge_cases']:\n            circular = {}\n            circular['self'] = circular\n            return json.dumps(circular) == '{\"self\": ...}'\n        return \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = custom_json_extensions(input_data)\nprint(result)", "input": null, "output": "error", "library": "json", "difficulty": "EXPERT", "task_type": "custom_json_extensions", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04787182807922363}
{"language": "python", "code": "import pandas as pd\n\ndef extract_performance(input_data):\n    df = pd.json_normalize(input_data['data'])\n    df['salary'].fillna(0, inplace=True)\n    avg_performance = df.groupby('department')['performance'].mean()\n    return avg_performance.idxmax()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = extract_performance(input_data)\nprint(result)", "input": null, "output": "Engineering", "library": "pandas", "difficulty": "ADVANCED", "task_type": "multi_index_operations", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23563218116760254}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        return True if isinstance(json_str, str) and len(json_str) > 0 else False\n    except (TypeError, OverflowError):\n        return False\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05161094665527344}
{"language": "python", "code": "import pandas as pd\n\ndef performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    df = df[df['performance'].notna()]\n    avg_performance = df['performance'].mean()\n    return round(avg_performance, 1)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\nresult = performance_metric(input_data)\nprint(result)", "input": null, "output": "4.2", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.2359769344329834}
{"language": "python", "code": "import requests\n\ndef status_code_checking(data):\n    response = requests.get(data[\"url\"])\n    return response.status_code\n\nresult = status_code_checking({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "status_code_checking", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3040168285369873}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09031295776367188}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\nimport time\n\ndef measure_response_time(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"]\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(total=retries, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    start_time = time.time()\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        response.raise_for_status()\n    except requests.exceptions.RequestException:\n        return \"error\"\n    \n    return round(time.time() - start_time, 2)\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = measure_response_time(input_data)\nprint(result)", "input": null, "output": "1.21", "library": "requests", "difficulty": "EXPERT", "task_type": "connection_pooling", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3415610790252686}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef performance_monitoring(input_data):\n    url = input_data[\"url\"]\n    method = input_data[\"method\"].lower()\n    timeout = input_data[\"timeout\"]\n    retries = input_data[\"retries\"]\n    session_config = input_data[\"session_config\"]\n\n    session = requests.Session()\n    retry_strategy = Retry(total=retries, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(method, url, timeout=timeout, **session_config)\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = performance_monitoring(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "performance_monitoring", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.9658901691436768}
{"language": "python", "code": "import json\n\ndef validate_json(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict):\n            if 'data' in parsed and isinstance(parsed['data'], dict):\n                return True\n    except (ValueError, TypeError):\n        return False\n    return False\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = validate_json(input_data)\nprint(result)", "input": null, "output": "True", "library": "json", "difficulty": "EXPERT", "task_type": "security_considerations", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.04899477958679199}
{"language": "python", "code": "import numpy as np\n\ndef structured_arrays(input_data):\n    arr = np.array(input_data['array'], dtype=input_data['dtype']).reshape(input_data['shape'])\n    arr = arr.astype(np.float32, copy=False)\n    arr += np.zeros_like(arr, dtype=np.float32)\n    return str(arr.sum() > 60)\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\"}\nresult = structured_arrays(input_data)\nprint(result)", "input": null, "output": "True", "library": "numpy", "difficulty": "EXPERT", "task_type": "structured_arrays", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.0907449722290039}
{"language": "python", "code": "import numpy as np\n\ndef memory_view_analysis(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    view = arr.view()\n    view[0, 0] = 100\n    if np.array_equal(arr[0, 0], 100):\n        return \"success\"\n    return \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_view_analysis(input_data)\nprint(result)", "input": null, "output": "error", "library": "numpy", "difficulty": "ADVANCED", "task_type": "memory_views", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08907485008239746}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef date_parsing(input_data):\n    try:\n        local_tz = pytz.timezone(input_data[\"date_string\"].split()[-1])\n        naive_dt = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(input_data[\"target_timezone\"])\n        aware_dt = local_dt.astimezone(target_tz)\n        return aware_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = date_parsing(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "date_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.0771629810333252}
{"language": "python", "code": "import pandas as pd\n\ndef merge_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    total_salary = df['salary'].sum()\n    avg_age = df['age'].mean()\n    return \"success\" if total_salary > 0 and avg_age > 0 else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = merge_operations(input_data)\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "merge_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.22447586059570312}
{"language": "python", "code": "import numpy as np\n\ndef memory_mapping(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = input_data[\"shape\"]\n    if arr.shape != tuple(shape):\n        return \"error\"\n    mem_map = np.lib.format.open_memmap('temp_array.npy', mode='w+', shape=arr.shape, dtype=arr.dtype)\n    mem_map[:] = arr\n    return \"success\" if np.array_equal(arr, mem_map) else \"error\"\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = memory_mapping(input_data)\nprint(result)", "input": null, "output": "success", "library": "numpy", "difficulty": "EXPERT", "task_type": "memory_mapping", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09555983543395996}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'quick', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05264902114868164}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05373883247375488}
{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    shape = np.array(input_data[\"shape\"])\n    if arr.shape != tuple(shape):\n        return \"error\"\n    arr_flat = arr.ravel()\n    total_sum = np.sum(arr_flat)\n    max_value = np.max(arr_flat)\n    return total_sum == max_value\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09103608131408691}
{"language": "python", "code": "import re\n\ndef possessive_quantifiers(input_data):\n    text = input_data[\"text\"]\n    pattern = r'(?<=\\(\\()([^()]*?)(?=\\)\\))'\n    match = re.findall(pattern, text)\n    return len(match)\n\ninput_data = {\"text\": \"Complex text with Unicode: caf\\u00e9, na\\u00efve, r\\u00e9sum\\u00e9, and nested structures like ((()))\"}\nresult = possessive_quantifiers(input_data)\nprint(result)", "input": null, "output": "1", "library": "re", "difficulty": "EXPERT", "task_type": "possessive_quantifiers", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.04806828498840332}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09086894989013672}
{"language": "python", "code": "import json\n\ndef schema_validation(input_data):\n    try:\n        data = json.loads(input_data)\n        if isinstance(data, dict):\n            return \"success\" if \"data\" in data and isinstance(data[\"data\"], dict) else \"error\"\n    except (ValueError, TypeError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = schema_validation(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "ADVANCED", "task_type": "schema_validation", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05173325538635254}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    arr = np.array(input_data[\"array\"])\n    return arr[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09132909774780273}
{"language": "python", "code": "import numpy as np\n\ndef calculate_sum(input_data):\n    return np.sum(np.array(input_data[\"array\"]))\n\nresult = calculate_sum({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "array_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08881497383117676}
{"language": "python", "code": "import pandas as pd\n\ndef column_selection(input_data):\n    df = pd.DataFrame(input_data['data'])\n    return df['age'].mean()\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\"}]}\nresult = column_selection(input_data)\nprint(result)", "input": null, "output": "30.0", "library": "pandas", "difficulty": "BEGINNER", "task_type": "column_selection", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23654389381408691}
{"language": "python", "code": "import json\n\ndef nested_object_handling(input_data):\n    data = json.loads(input_data)\n    ages = [user['age'] for user in data['data']['users'] if user['active']]\n    return max(ages) if ages else 0\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = nested_object_handling(input_data)\nprint(result)", "input": null, "output": "30", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "nested_object_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05144023895263672}
{"language": "python", "code": "import numpy as np\n\ndef linear_algebra(input_data):\n    array = np.array(input_data['array'])\n    if array.shape != tuple(input_data['shape']):\n        return \"error\"\n    return np.linalg.det(array) > 0\n\nresult = linear_algebra({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "linear_algebra", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09291386604309082}
{"language": "python", "code": "import json\n\ndef count_keys(input_data):\n    return len(json.loads(input_data))\n\ninput_data = '{\"data\": {\"name\": \"John\", \"age\": 30}}'\nresult = count_keys(input_data)\nprint(result)", "input": null, "output": "1", "library": "json", "difficulty": "BEGINNER", "task_type": "basic_serialization", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.025238037109375}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef advanced_streaming(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data['retries'], backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.request(input_data['method'], input_data['url'], verify=input_data['session_config']['verify'], timeout=input_data['timeout'], stream=input_data['session_config']['stream'])\n        response.raise_for_status()\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = advanced_streaming(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "advanced_streaming", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 3.508364677429199}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_performance_metric(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_performance = df['performance'].mean()\n    high_earners = df[df['salary'] > 70000]['performance'].count()\n    return (avg_performance, high_earners)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.2}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\", \"department\": \"Sales\", \"performance\": 3.8}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\", \"department\": \"Engineering\", \"performance\": 4.5}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\", \"department\": \"Marketing\", \"performance\": 4.0}, {\"name\": \"Eve\", \"age\": 32, \"city\": \"San Francisco\", \"salary\": 80000, \"date\": \"2023-01-01\", \"department\": \"Engineering\", \"performance\": 4.7}], \"edge_cases\": [\"missing_values\", \"duplicate_dates\", \"unicode_names\"]}\n\nresult = calculate_performance_metric(input_data)\nprint(result[0] + result[1])", "input": null, "output": "6.24", "library": "pandas", "difficulty": "EXPERT", "task_type": "memory_efficient_processing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23871374130249023}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_users = sum(1 for user in users if user.get(\"active\"))\n    return \"success\" if active_users > 0 else \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05252814292907715}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05205798149108887}
{"language": "python", "code": "import json\n\ndef performance_optimization(input_data):\n    json_str = json.dumps(input_data, ensure_ascii=False)\n    loaded_data = json.loads(json_str)\n    value = loaded_data['data']['nested']['deep']['very']['deep']['value']\n    return value if isinstance(value, int) else \"error\"\n\ninput_data = {\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "EXPERT", "task_type": "performance_optimization", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050887107849121094}
{"language": "python", "code": "import re\n\ndef anchors_and_boundaries(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_match = re.search(r'\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)\n    return \"found\" if email_match and phone_match else \"not found\"\n\nresult = anchors_and_boundaries({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "found", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "anchors_and_boundaries", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05165600776672363}
{"language": "python", "code": "import json\n\ndef unicode_handling(input_data):\n    try:\n        data = json.loads(input_data)\n        users = data.get(\"data\", {}).get(\"users\", [])\n        active_users = sum(1 for user in users if user.get(\"active\"))\n        return \"success\" if active_users > 0 else \"error\"\n    except (TypeError, json.JSONDecodeError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = unicode_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "unicode_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05158400535583496}
{"language": "python", "code": "import pandas as pd\n\ndef calculate_aggregate(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = pd.to_numeric(df['salary'], errors='coerce')\n    avg_salary = df.groupby('city')['salary'].mean().fillna(0)\n    return avg_salary.idxmax() if not avg_salary.empty else \"error\"\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = calculate_aggregate(input_data)\nprint(result)", "input": null, "output": "New York", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3044731616973877}
{"language": "python", "code": "import pandas as pd\n\ndef datetime_operations(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df['salary'].mean()\n    return \"success\" if avg_salary > 40000 else \"error\"\n\nresult = datetime_operations({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]})\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "datetime_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23485803604125977}
{"language": "python", "code": "import pandas as pd\n\ndef aggregate_salary(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(0)\n    avg_salary = df.groupby('city')['salary'].mean().max()\n    return round(avg_salary)\n\ninput_data = {\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]}\nresult = aggregate_salary(input_data)\nprint(result)", "input": null, "output": "62500", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "groupby_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.23654627799987793}
{"language": "python", "code": "import re\n\ndef literal_matching(input_data):\n    return bool(re.search(r'fox', input_data['text']))\n\nresult = literal_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "literal_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.050112009048461914}
{"language": "python", "code": "import numpy as np\n\ndef process_array(input_data):\n    arr = np.array(input_data['array'])\n    if arr.shape != tuple(input_data['shape']):\n        return \"error\"\n    return np.sum(arr) % 2 == 0\n\nresult = process_array({\"array\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"shape\": [3, 3]})\nprint(result)", "input": null, "output": "False", "library": "numpy", "difficulty": "INTERMEDIATE", "task_type": "broadcasting_operations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07465410232543945}
{"language": "python", "code": "import json\n\ndef streaming_parsing(input_data):\n    data = json.loads(input_data)\n    users = data.get(\"data\", {}).get(\"users\", [])\n    active_count = sum(1 for user in users if user.get(\"active\"))\n    return f\"{active_count} active users\"\n\ninput_data = '{\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": true}, {\"name\": \"Jane\", \"age\": 25, \"active\": false}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}'\nresult = streaming_parsing(input_data)\nprint(result)", "input": null, "output": "1 active users", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "streaming_parsing", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051548004150390625}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        parsed = json.loads(input_data)\n        if isinstance(parsed, dict) and \"data\" in parsed:\n            return str(parsed[\"data\"][\"numbers\"][\"int\"])\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n    return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05112600326538086}
{"language": "python", "code": "import json\n\ndef encode_success(input_data):\n    try:\n        json_data = json.dumps(input_data)\n        return \"success\" if isinstance(json_data, str) else \"error\"\n    except (TypeError, OverflowError):\n        return \"error\"\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = encode_success(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.050900936126708984}
{"language": "python", "code": "import numpy as np\n\ndef basic_operations(input_data):\n    array = np.array(input_data[\"array\"])\n    return np.sum(array)\n\nresult = basic_operations({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "15", "library": "numpy", "difficulty": "BEGINNER", "task_type": "basic_operations", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08963990211486816}
{"language": "python", "code": "import requests\n\ndef authentication_handling(input_data):\n    session = requests.Session()\n    try:\n        response = session.request(\n            method=input_data.get(\"method\", \"GET\"),\n            url=input_data[\"url\"],\n            json=input_data.get(\"data\"),\n            headers=input_data.get(\"headers\"),\n            timeout=5\n        )\n        return \"success\" if response.status_code == 200 else \"error\"\n    except (requests.exceptions.RequestException, KeyError):\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = authentication_handling(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "authentication_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3331170082092285}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    adapter = HTTPAdapter(max_retries=Retry(total=input_data['retries'], backoff_factor=1))\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    \n    try:\n        response = session.get(input_data['url'], timeout=input_data['timeout'], verify=input_data['session_config']['verify'], stream=input_data['session_config']['stream'])\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n    finally:\n        session.close()\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3481059074401855}
{"language": "python", "code": "import json\n\ndef count_parsed_json_objects(input_data):\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        if isinstance(obj, list):\n            return 1 + sum(count(i) for i in obj)\n        return 0\n\n    parsed_data = json.loads(input_data)\n    return count(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_parsed_json_objects(input_data)\nprint(result)", "input": null, "output": "10", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.051090240478515625}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05159187316894531}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = get_day_of_week({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05544018745422363}
{"language": "python", "code": "import re\n\ndef count_nested_patterns(input_data):\n    pattern = r\"['\\\"].*?['\\\"]\"\n    matches = re.findall(pattern, input_data['text'])\n    return len(matches)\n\ninput_data = {\"text\": \"Parse this: {'name': 'John', 'age': 30} and [1, 2, 3] with 'quotes' and \\\"double quotes\\\".\"}\nresult = count_nested_patterns(input_data)\nprint(result)", "input": null, "output": "5", "library": "re", "difficulty": "ADVANCED", "task_type": "recursive_patterns", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05228090286254883}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data.get(\"text\", \"\")\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    phone_pattern = r'\\(?\\d{3}\\)?\\s?\\d{3}[-.\\s]?\\d{4}'\n    email_match = re.search(email_pattern, text)\n    phone_match = re.search(phone_pattern, text)\n    return \"found\" if email_match and phone_match else \"not found\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "found", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05145716667175293}
{"language": "python", "code": "import re\n\ndef basic_substitution(input_data):\n    return re.sub(r'fox', 'cat', input_data['text'])\n\nresult = basic_substitution({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "The quick brown cat jumps over the lazy dog.", "library": "re", "difficulty": "BEGINNER", "task_type": "basic_substitution", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.051795005798339844}
{"language": "python", "code": "import re\n\ndef count_matches(input_data):\n    return len(re.findall(r'\\bthe\\b', input_data['text'], re.IGNORECASE))\n\nresult = count_matches({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "2", "library": "re", "difficulty": "BEGINNER", "task_type": "simple_pattern_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05012202262878418}
{"language": "python", "code": "import requests\n\ndef count_successful_requests(input_data):\n    session = requests.Session()\n    success_count = 0\n    try:\n        response = session.request(input_data.get(\"method\", \"GET\"), input_data[\"url\"], json=input_data.get(\"data\"), headers=input_data.get(\"headers\"))\n        if response.status_code == 200:\n            success_count += 1\n    except (requests.RequestException, TypeError):\n        return \"error\"\n    finally:\n        session.close()\n    return success_count\n\ninput_data = {\"url\": \"https://httpbin.org/post\", \"method\": \"POST\", \"data\": {\"key\": \"value\"}, \"headers\": {\"Content-Type\": \"application/json\"}}\nresult = count_successful_requests(input_data)\nprint(result)", "input": null, "output": "1", "library": "requests", "difficulty": "INTERMEDIATE", "task_type": "session_management", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.32093191146850586}
{"language": "python", "code": "import json\n\ndef check_json_encoding(input_data):\n    try:\n        json_str = json.dumps(input_data)\n        decoded_data = json.loads(json_str)\n        return \"success\" if decoded_data == input_data else \"error\"\n    except (TypeError, ValueError):\n        return \"error\"\n\ninput_data = {\"data\": {\"users\": [{\"name\": \"John\", \"age\": 30, \"active\": True}, {\"name\": \"Jane\", \"age\": 25, \"active\": False}], \"metadata\": {\"version\": \"1.0\", \"timestamp\": \"2023-12-25T10:00:00Z\"}}}\nresult = check_json_encoding(input_data)\nprint(result)", "input": null, "output": "success", "library": "json", "difficulty": "INTERMEDIATE", "task_type": "custom_encoders", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05103492736816406}
{"language": "python", "code": "import datetime\nimport pytz\n\ndef business_day_calculations(input_data):\n    date_string = input_data[\"date_string\"]\n    fmt = input_data[\"format\"]\n    target_timezone = input_data[\"target_timezone\"]\n    try:\n        local_tz = pytz.timezone(\"EST\")\n        naive_dt = datetime.datetime.strptime(date_string, fmt)\n        local_dt = local_tz.localize(naive_dt)\n        target_tz = pytz.timezone(target_timezone)\n        utc_dt = local_dt.astimezone(target_tz)\n        return \"success\" if utc_dt.weekday() < 5 else \"weekend\"\n    except Exception:\n        return \"error\"\n\ninput_data = {\"date_string\": \"2023-12-25 14:30:00 EST\", \"format\": \"%Y-%m-%d %H:%M:%S %Z\", \"target_timezone\": \"UTC\"}\nresult = business_day_calculations(input_data)\nprint(result)", "input": null, "output": "error", "library": "datetime", "difficulty": "INTERMEDIATE", "task_type": "business_day_calculations", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.07227683067321777}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef proxy_configuration(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=0.1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return \"success\" if response.status_code == 200 else \"error\"\n    except requests.Timeout:\n        return \"timeout\"\n    except requests.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = proxy_configuration(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "ADVANCED", "task_type": "proxy_configuration", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.3118770122528076}
{"language": "python", "code": "import json\n\ndef memory_efficient_parsing(input_data):\n    try:\n        data = json.loads(input_data)\n        value = data['data']['nested']['deep']['very']['deep']['value']\n        return value if isinstance(value, int) else \"error\"\n    except (json.JSONDecodeError, KeyError):\n        return \"error\"\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = memory_efficient_parsing(input_data)\nprint(result)", "input": null, "output": "42", "library": "json", "difficulty": "ADVANCED", "task_type": "memory_efficient_parsing", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05206584930419922}
{"language": "python", "code": "import numpy as np\n\ndef performance_optimization(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    reshaped = arr.reshape(input_data[\"shape\"])\n    broadcasted = reshaped + np.array([[1], [2]], dtype=np.float64)\n    optimized = np.sum(broadcasted, axis=0)\n    return int(np.max(optimized))\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = performance_optimization(input_data)\nprint(result)", "input": null, "output": "30", "library": "numpy", "difficulty": "ADVANCED", "task_type": "performance_optimization", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.07758688926696777}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        if isinstance(obj, list):\n            return sum(count(i) for i in obj)\n        return 0\n\n    try:\n        parsed_data = json.loads(input_data)\n    except (json.JSONDecodeError, TypeError):\n        return \"error\"\n    \n    return count(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\\\u00e9, emoji: \\\\ud83c\\\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.03710794448852539}
{"language": "python", "code": "import re\n\ndef extract_info(input_data):\n    text = input_data[\"text\"]\n    email_match = re.search(r'\\b\\w+@\\w+\\.\\w+\\b', text)\n    phone_match = re.search(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', text)\n    return email_match.group(0) if email_match else \"none\" if not phone_match else \"error\"\n\nresult = extract_info({\"text\": \"Contact us at support@example.com or call (555) 123-4567 for assistance.\"})\nprint(result)", "input": null, "output": "support@example.com", "library": "re", "difficulty": "INTERMEDIATE", "task_type": "quantifiers", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.05197501182556152}
{"language": "python", "code": "import numpy as np\n\ndef simple_indexing(input_data):\n    array = np.array(input_data['array'])\n    return array[2]\n\nresult = simple_indexing({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "3", "library": "numpy", "difficulty": "BEGINNER", "task_type": "simple_indexing", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09160137176513672}

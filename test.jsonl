{"language": "python", "code": "import numpy as np\n\ndef c_integration_patterns(input_data):\n    arr = np.array(input_data[\"array\"], dtype=input_data[\"dtype\"])\n    result = np.sum(arr, axis=0) / arr.shape[0]\n    if input_data[\"edge_cases\"]:\n        if \"broadcasting\" in input_data[\"edge_cases\"]:\n            arr_broadcast = np.broadcast_to(arr, (3, 2, 2))\n            result += np.sum(arr_broadcast, axis=0) / arr_broadcast.shape[0]\n        if \"memory_layout\" in input_data[\"edge_cases\"]:\n            result = np.ascontiguousarray(result)\n    return result[0, 0]\n\ninput_data = {\"array\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], \"shape\": [3, 2, 2], \"dtype\": \"float64\", \"edge_cases\": [\"broadcasting\", \"memory_layout\"]}\nresult = c_integration_patterns(input_data)\nprint(result)", "input": null, "output": "10.0", "library": "numpy", "difficulty": "EXPERT", "task_type": "c_integration_patterns", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.08063697814941406}
{"language": "python", "code": "import datetime\n\ndef get_day_of_week(input_data):\n    date = datetime.datetime.strptime(input_data[\"date_string\"], input_data[\"format\"])\n    return date.weekday()\n\nresult = get_day_of_week({\"date_string\": \"2023-12-25\", \"format\": \"%Y-%m-%d\"})\nprint(result)", "input": null, "output": "0", "library": "datetime", "difficulty": "BEGINNER", "task_type": "basic_datetime_creation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "timezone_naive_aware", "leap_second_handling", "calendar_edge_cases"], "execution_time": 0.05318617820739746}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    parsed_data = json.loads(input_data)\n    count = 0\n    \n    def count_recursive(obj):\n        nonlocal count\n        if isinstance(obj, dict):\n            count += 1\n            for v in obj.values():\n                count_recursive(v)\n        elif isinstance(obj, list):\n            count += 1\n            for item in obj:\n                count_recursive(item)\n\n    count_recursive(parsed_data)\n    return count\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "10", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.0527501106262207}
{"language": "python", "code": "import re\n\ndef case_insensitive_matching(input_data):\n    return bool(re.search(r'fox', input_data['text'], re.IGNORECASE))\n\nresult = case_insensitive_matching({\"text\": \"The quick brown fox jumps over the lazy dog.\"})\nprint(result)", "input": null, "output": "True", "library": "re", "difficulty": "BEGINNER", "task_type": "case_insensitive_matching", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "greedy_vs_lazy", "backtracking", "unicode_handling"], "execution_time": 0.049588918685913086}
{"language": "python", "code": "import requests\n\ndef header_handling(input_data):\n    response = requests.request(input_data[\"method\"], input_data[\"url\"])\n    return response.status_code\n\nresult = header_handling({\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"})\nprint(result)", "input": null, "output": "200", "library": "requests", "difficulty": "BEGINNER", "task_type": "header_handling", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 0.3221268653869629}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef check_adapter_functionality(input_data):\n    session = requests.Session()\n    retries = Retry(total=input_data[\"retries\"], backoff_factor=1)\n    adapter = HTTPAdapter(max_retries=retries)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n    try:\n        response = session.get(input_data[\"url\"], timeout=input_data[\"timeout\"], verify=input_data[\"session_config\"][\"verify\"], stream=input_data[\"session_config\"][\"stream\"])\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = check_adapter_functionality(input_data)\nprint(result)", "input": null, "output": "True", "library": "requests", "difficulty": "ADVANCED", "task_type": "custom_adapters", "reasoning_traps": ["performance_pitfalls", "memory_implications", "subtle_api_behaviors", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 2.020397901535034}
{"language": "python", "code": "import pandas as pd\n\ndef missing_data_handling(input_data):\n    df = pd.DataFrame(input_data['data'])\n    df['salary'] = df['salary'].fillna(df['salary'].mean())\n    df['age'] = df['age'].astype(int)\n    return \"success\" if df['salary'].isnull().sum() == 0 else \"error\"\n\nresult = missing_data_handling({\"data\": [{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"salary\": 50000, \"date\": \"2023-01-15\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\", \"salary\": None, \"date\": \"2023-02-20\"}, {\"name\": \"Charlie\", \"age\": 35, \"city\": \"New York\", \"salary\": 75000, \"date\": \"2023-01-15\"}, {\"name\": \"Diana\", \"age\": 28, \"city\": \"Chicago\", \"salary\": 60000, \"date\": \"2023-03-10\"}]})\nprint(result)", "input": null, "output": "success", "library": "pandas", "difficulty": "INTERMEDIATE", "task_type": "missing_data_handling", "reasoning_traps": ["parameter_interactions", "data_type_conversions", "null_handling", "index_alignment", "copy_vs_view", "chained_assignment"], "execution_time": 0.3708481788635254}
{"language": "python", "code": "import numpy as np\n\ndef shape_manipulation(input_data):\n    array = np.array(input_data[\"array\"])\n    return array.shape[0]\n\nresult = shape_manipulation({\"array\": [1, 2, 3, 4, 5], \"shape\": [5]})\nprint(result)", "input": null, "output": "5", "library": "numpy", "difficulty": "BEGINNER", "task_type": "shape_manipulation", "reasoning_traps": ["basic_api_usage", "simple_edge_cases", "broadcasting_rules", "memory_layout", "dtype_promotion"], "execution_time": 0.09293985366821289}
{"language": "python", "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef custom_authentication(input_data):\n    session = requests.Session()\n    retry_strategy = Retry(\n        total=input_data['retries'],\n        backoff_factor=1,\n        status_forcelist=[500, 502, 503, 504]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount(\"https://\", adapter)\n\n    try:\n        response = session.request(\n            method=input_data['method'],\n            url=input_data['url'],\n            timeout=input_data['timeout'],\n            verify=input_data['session_config']['verify'],\n            stream=input_data['session_config']['stream']\n        )\n        return \"success\" if response.ok else \"error\"\n    except requests.exceptions.Timeout:\n        return \"timeout\"\n    except requests.exceptions.RequestException:\n        return \"error\"\n\ninput_data = {\"url\": \"https://httpbin.org/delay/1\", \"method\": \"GET\", \"timeout\": 2, \"retries\": 3, \"session_config\": {\"verify\": True, \"stream\": False}}\nresult = custom_authentication(input_data)\nprint(result)", "input": null, "output": "success", "library": "requests", "difficulty": "EXPERT", "task_type": "custom_authentication", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "session_persistence", "connection_pooling", "timeout_behavior"], "execution_time": 1.288074016571045}
{"language": "python", "code": "import json\n\ndef count_json_objects(input_data):\n    parsed_data = json.loads(input_data)\n    def count(obj):\n        if isinstance(obj, dict):\n            return 1 + sum(count(v) for v in obj.values())\n        if isinstance(obj, list):\n            return sum(count(i) for i in obj)\n        return 0\n    return count(parsed_data)\n\ninput_data = '{\"data\": {\"nested\": {\"deep\": {\"very\": {\"deep\": {\"value\": 42}}}}, \"array\": [1, 2, {\"nested\": \"value\"}], \"special_chars\": \"unicode: caf\\u00e9, emoji: \\ud83c\\udf89\", \"numbers\": {\"int\": 42, \"float\": 3.14159, \"big\": 1234567890123456789}}, \"edge_cases\": [\"circular_refs\", \"precision_loss\", \"unicode_handling\"]}'\nresult = count_json_objects(input_data)\nprint(result)", "input": null, "output": "8", "library": "json", "difficulty": "EXPERT", "task_type": "incremental_parsing", "reasoning_traps": ["optimization_tricks", "undocumented_behaviors", "complex_interactions", "precision_loss", "object_ordering", "circular_references"], "execution_time": 0.05271005630493164}
